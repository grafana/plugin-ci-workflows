# Description:
# Run Playwright E2E tests for the plugin.
# The plugin must be built via the "ci" workflow and available as a GitHub artifact before running this workflow.

name: Plugins - Playwright E2E tests

on:
  workflow_call:
    inputs:
      id:
        description: Plugin ID
        type: string
        required: true
      version:
        description: Plugin version
        type: string
        required: true
      plugin-directory:
        description: Directory of the plugin, if not in the root of the repository.
        type: string
        required: false
        default: .
      # https://github.com/grafana/plugin-actions/blob/main/e2e-version/action.yml
      skip-grafana-dev-image:
        default: false
        required: false
        type: boolean
      version-resolver-type:
        required: false
        type: string
        default: plugin-grafana-dependency
      grafana-dependency:
        required: false
        type: string
      upload-artifacts:
        required: false
        type: boolean
        default: false
      report-path:
        required: false
        type: string
        description: Path to the folder to use to upload the artifacts
        default: playwright-report/
      docker-compose-file:
        required: false
        type: string
        description: Path to the docker-compose file to use for testing
      playwright-config:
        required: false
        type: string
        default: playwright.config.ts
        description: Path to the Playwright config file to use for testing
      secrets:
        required: false
        type: string
        description: The secrets to use for Playwright tests
      grafana-url:
        description: The Grafana URL to wait for before running the tests
        type: string
        required: false
        default: http://localhost:3000/

permissions:
  contents: read
  id-token: write

jobs:
  resolve-versions:
    name: Resolve Grafana images
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      matrix: ${{ steps.resolve-versions.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Resolve Grafana E2E versions
        id: resolve-versions
        uses: grafana/plugin-actions/e2e-version@main # zizmor: ignore[unpinned-uses]
        with:
          skip-grafana-dev-image: ${{ inputs.skip-grafana-dev-image }}
          version-resolver-type: ${{ inputs.version-resolver-type }}
          grafana-dependency: ${{ inputs.grafana-dependency }}
          plugin-directory: ${{ inputs.plugin-directory }}

  playwright-tests:
    needs: resolve-versions
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        GRAFANA_IMAGE: ${{fromJson(needs.resolve-versions.outputs.matrix)}}
    name: e2e ${{ matrix.GRAFANA_IMAGE.name }}@${{ matrix.GRAFANA_IMAGE.VERSION }}
    runs-on: ubuntu-latest-8-cores
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Setup Node.js environment
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: ${{ inputs.plugin-directory }}/.nvmrc

      - name: Install npm dependencies
        # TODO: find a better way
        run: |
          if [ -f yarn.lock ]; then
            yarn install --frozen-lockfile
          else
            npm ci
          fi
        shell: bash
        working-directory: ${{ inputs.plugin-directory }}

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Download GitHub artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: dist-artifacts
          path: /tmp/dist-artifacts

      - name: Move dist artifacts
        run: |
          rm -rf dist
          mkdir -p dist
          src=$(pwd)

          cd /tmp/dist-artifacts
          # unzip the universal zip
          unzip "${PLUGIN_ID}-${PLUGIN_VERSION}.zip" -d out
          # Folder structure: /tmp/dist-artifacts/out/$PLUGIN_ID/plugin.json
          cd out
          cd "$(ls -1)"
          mv ./* "$src/dist/"
        env:
          PLUGIN_ID: ${{ inputs.id }}
          PLUGIN_VERSION: ${{ inputs.version }}
        working-directory: ${{ inputs.plugin-directory }}

      - name: Start Grafana
        # add the -f argument only if "inputs.docker-compose-file" is defined
        run: |
          GRAFANA_VERSION=${{ matrix.GRAFANA_IMAGE.VERSION }} GRAFANA_IMAGE=${{ matrix.GRAFANA_IMAGE.NAME }} docker compose ${DOCKER_COMPOSE_FILE:+-f "$DOCKER_COMPOSE_FILE"} up -d
        working-directory: ${{ inputs.plugin-directory }}
        env:
          DOCKER_COMPOSE_FILE: ${{ inputs.docker-compose-file }}

      - name: Wait for Grafana to start
        uses: grafana/plugin-actions/wait-for-grafana@main # zizmor: ignore[unpinned-uses]
        with:
          url: "${{ inputs.grafana-url }}"

      - name: Determine if secrets should be fetched
        id: fetch-secrets
        run: |
          echo "should-fetch=${{ github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]' && inputs.secrets != '' }}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get secrets from Vault
        if: steps.fetch-secrets.outputs.should-fetch == 'true'
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@get-vault-secrets/v1.2.1
        with:
          repo_secrets: ${{ inputs.secrets }}
          export_env: false

      - name: Set secrets
        if: steps.fetch-secrets.outputs.should-fetch == 'true'
        run: |
          echo '${{ steps.get-secrets.outputs.secrets }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> .env
          cat .env
        working-directory: ${{ inputs.plugin-directory }}

      - name: Run Playwright tests
        id: run-tests
        run: npx playwright test --config "${PLAYWRIGHT_CONFIG}"
        env:
          PLAYWRIGHT_CONFIG: ${{ inputs.playwright-config }}
        working-directory: ${{ inputs.plugin-directory }}

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: ${{ (inputs.upload-artifacts == true) && ((always() && steps.run-tests.outcome == 'success') || (failure() && steps.run-tests.outcome == 'failure')) }}
        with:
          name: playwright-report-${{ matrix.GRAFANA_IMAGE.NAME }}-v${{ matrix.GRAFANA_IMAGE.VERSION }}-${{github.run_id}}
          path: ${{ inputs.plugin-directory }}/${{ inputs.report-path }}
          retention-days: 30

  check-playwright-status:
    needs: playwright-tests
    name: Check Playwright E2E matrix status
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check matrix job status
        # This step will fail if any of the matrix jobs failed
        run: |
          if [ "${{ contains(needs.playwright-tests.result, 'failure') }}" = "true" ]; then
            echo "One or more jobs in the E2E testing matrix failed"
            exit 1
          else
            echo "All E2E test jobs succeeded"
          fi
