# Description:
# Run Playwright E2E tests for the plugin.
# The plugin must be built via the "ci" workflow and available as a GitHub artifact before running this workflow.

name: Plugins - Playwright E2E tests

on:
  workflow_call:
    inputs:
      id:
        description: Plugin ID
        type: string
        required: true
      version:
        description: Plugin version
        type: string
        required: true
      plugin-directory:
        description: Directory of the plugin, if not in the root of the repository.
        type: string
        required: false
        default: .
      # https://github.com/grafana/plugin-actions/blob/main/e2e-version/action.yml
      skip-grafana-dev-image:
        default: false
        required: false
        type: boolean
      version-resolver-type:
        required: false
        type: string
        default: plugin-grafana-dependency
      grafana-dependency:
        required: false
        type: string
      upload-artifacts:
        required: false
        type: boolean
        default: false
      report-path:
        required: false
        type: string
        description: Path to the folder to use to upload the artifacts
        default: playwright-report/
      docker-compose-file:
        required: false
        type: string
        description: Path to the docker-compose file to use for testing
      playwright-config:
        required: false
        type: string
        default: playwright.config.ts
        description: Path to the Playwright config file to use for testing
      secrets:
        required: false
        type: string
        description: The secrets to use for Playwright tests
      grafana-url:
        description: The Grafana URL to wait for before running the tests
        type: string
        required: false
        default: http://localhost:3000/
      node-version:
        description: Node.js version to use
        type: string
        required: false
      npm-registry-auth:
        description: |
          Whether to authenticate to the npm registry in Google Artifact Registry.
          If true, the root of the plugin repository must contain a `.npmrc` file.
        type: boolean
        required: false
        default: false
permissions:
  contents: read
  id-token: write

jobs:
  resolve-versions:
    name: Resolve Grafana images
    runs-on: ubuntu-x64-small
    timeout-minutes: 3
    outputs:
      matrix: ${{ steps.resolve-versions.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Resolve Grafana E2E versions
        id: resolve-versions
        uses: grafana/plugin-actions/e2e-version@main
        with:
          skip-grafana-dev-image: ${{ inputs.skip-grafana-dev-image }}
          version-resolver-type: ${{ inputs.version-resolver-type }}
          grafana-dependency: ${{ inputs.grafana-dependency }}
          plugin-directory: ${{ inputs.plugin-directory }}

  playwright-tests:
    needs: resolve-versions
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        GRAFANA_IMAGE: ${{fromJson(needs.resolve-versions.outputs.matrix)}}
    name: e2e ${{ matrix.GRAFANA_IMAGE.name }}@${{ matrix.GRAFANA_IMAGE.VERSION }}
    runs-on: ubuntu-x64-large
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Detect package manager
        id: node-pm
        # TODO: Fix this once we have a version of the package-manager-detect action
        uses: grafana/plugin-actions/package-manager-detect@jackw/pm-detect # zizmor: ignore[unpinned-uses]
        with:
          working-directory: ${{ inputs.plugin-directory }}

      - name: Install pnpm
        if: steps.node-pm.outputs.name == 'pnpm'
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Setup Node.js environment
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ inputs.node-version }}
          node-version-file: ${{ inputs.plugin-directory }}/.nvmrc
          cache: ${{ steps.node-pm.outputs.name }}

      - name: Login to Google Cloud
        if: inputs.npm-registry-auth == true
        uses: google-github-actions/auth@7c6bc770dae815cd3e89ee6cdf493a5fab2cc093 # v3.0.0
        with:
          token_format: access_token
          workload_identity_provider: "projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider"
          service_account: github-plugin-ci-workflows@grafanalabs-workload-identity.iam.gserviceaccount.com

      - name: NPM registry auth
        if: inputs.npm-registry-auth == true
        shell: bash
        working-directory: ${{ inputs.plugin-directory }}
        run: GOOGLE_APPLICATION_CREDENTIALS=${{ env.GOOGLE_APPLICATION_CREDENTIALS }} npx google-artifactregistry-auth --credential-config ./.npmrc

      - name: Install npm dependencies
        run: ${NODE_PM_FROZENINSTALL}
        shell: bash
        working-directory: ${{ inputs.plugin-directory }}
        env:
          NODE_PM_FROZENINSTALL: ${{ steps.node-pm.outputs.frozenInstall }}

      - name: Get Playwright version
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        id: version
        with:
          script: |
            const workingDirectory = process.env.PLUGIN_DIRECTORY;
            console.debug("Specified working directory:", workingDirectory);
            if (workingDirectory) process.chdir(workingDirectory);
            console.debug("Actual working directory:", process.cwd());
            let version = "";
            try {
              version = require("@playwright/test/package.json").version;
            } catch (error) {
              console.log(error.message);
            }
            console.debug("Version:", version);
            if (version) {
              core.setOutput("version", version);
            } else {
              core.setFailed("Couldn't get Playwright version");
            }
        env:
          PLUGIN_DIRECTORY: ${{ inputs.plugin-directory }}

      - name: Cache Playwright
        id: cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ steps.version.outputs.version }}

      - name: Install Playwright Browsers
        run: ${NODE_PM_EXEC} playwright install --with-deps chromium
        shell: bash
        env:
          NODE_PM_EXEC: ${{ steps.node-pm.outputs.exec }}

      - name: Download GitHub artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: dist-artifacts
          path: /tmp/dist-artifacts

      - name: Move dist artifacts
        run: |
          rm -rf dist
          mkdir -p dist
          src=$(pwd)

          cd /tmp/dist-artifacts
          # unzip the universal zip
          unzip "${PLUGIN_ID}-${PLUGIN_VERSION}.zip" -d out
          # Folder structure: /tmp/dist-artifacts/out/$PLUGIN_ID/plugin.json
          cd out
          cd "$(ls -1)"
          mv ./* "$src/dist/"
        env:
          PLUGIN_ID: ${{ inputs.id }}
          PLUGIN_VERSION: ${{ inputs.version }}
        working-directory: ${{ inputs.plugin-directory }}

      - name: Get secrets from Vault
        if: inputs.secrets != ''
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@a37de51f3d713a30a9e4b21bcdfbd38170020593 # get-vault-secrets/v1.3.0
        with:
          repo_secrets: ${{ inputs.secrets }}
          export_env: false

      - name: Set secrets
        if: inputs.secrets != ''
        run: |
          echo '${{ steps.get-secrets.outputs.secrets }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> .env
        working-directory: ${{ inputs.plugin-directory }}

      - name: Start Grafana
        # add the -f argument only if "inputs.docker-compose-file" is defined
        run: |
          GRAFANA_VERSION=${{ matrix.GRAFANA_IMAGE.VERSION }} GRAFANA_IMAGE=${{ matrix.GRAFANA_IMAGE.NAME }} docker compose ${DOCKER_COMPOSE_FILE:+-f "$DOCKER_COMPOSE_FILE"} up -d
        working-directory: ${{ inputs.plugin-directory }}
        env:
          DOCKER_COMPOSE_FILE: ${{ inputs.docker-compose-file }}

      - name: Wait for Grafana to start
        uses: grafana/plugin-actions/wait-for-grafana@main
        with:
          url: "${{ inputs.grafana-url }}"

      - name: Run Playwright tests
        id: run-tests
        run: ${NODE_PM_EXEC} playwright test --config "${PLAYWRIGHT_CONFIG}"
        env:
          PLAYWRIGHT_CONFIG: ${{ inputs.playwright-config }}
          GRAFANA_VERSION: ${{ matrix.GRAFANA_IMAGE.VERSION }}
          GRAFANA_IMAGE: ${{ matrix.GRAFANA_IMAGE.NAME }}
          NODE_PM_EXEC: ${{ steps.node-pm.outputs.exec }}
        working-directory: ${{ inputs.plugin-directory }}

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: ${{ (inputs.upload-artifacts == true) && ((always() && steps.run-tests.outcome == 'success') || (failure() && steps.run-tests.outcome == 'failure')) }}
        with:
          name: playwright-report-${{ matrix.GRAFANA_IMAGE.NAME }}-v${{ matrix.GRAFANA_IMAGE.VERSION }}-${{github.run_id}}
          path: ${{ inputs.plugin-directory }}/${{ inputs.report-path }}
          retention-days: 30

  check-playwright-status:
    needs: playwright-tests
    name: Check Playwright E2E matrix status
    runs-on: ubuntu-x64-small
    if: always()
    steps:
      - name: Check matrix job status
        # This step will fail if any of the matrix jobs failed
        run: |
          if [ "${{ contains(needs.playwright-tests.result, 'failure') }}" = "true" ]; then
            echo "One or more jobs in the E2E testing matrix failed"
            exit 1
          else
            echo "All E2E test jobs succeeded"
          fi
