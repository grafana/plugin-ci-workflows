# Description:
# Publishes the plugin to the Grafana Plugin Catalog.
# The plugin must be built via the "ci" workflow before running this workflow.
# It does the following steps:
#  - Publishes the plugin to 'dev', 'ops', and 'prod' catalogs.
#  - ('prod' target only) Publishes docs to the website, if they exist.
#  - ('prod' target only) Creates a lightweight Git tag and a drafts a new GitHub.
#
#  This workflow can also publish a PR (or any other non-main branch), but only to the 'dev' catalog.

name: Plugins - Publish plugin

on:
  workflow_call:
    inputs:
      # Those inputs can be customized depending on the plugin's needs:

      # Publishing options (GCS and/or catalog)
      gcs-only:
        description: |
          Only publish the plugin to GCS, do not publish the plugin to the Grafana Plugin Catalog.
        default: false
        type: boolean
      scopes:
        description: |
          Comma-separated list of scopes for the plugin version in the catalog.
          Default is 'universal'.
        required: false
        default: universal
        type: string
      # TODO: 'managed' deployment_type will be added here in the future.
      grafana-cloud-deployment-type:
        description: |
          If set, trigger Argo Workflow to deploy the plugin to the specified environment(s) in Grafana Cloud.
          `gcs_only` must be false for this to work.

          Supported values:
            - provisioned

          Currently, this only works for provisioned plugins that have migrated to grafana_cloud-scoped plugins in the plugins catalog.
          Default is empty (do not trigger Argo Workflow).
        required: false
        default:
        type: string

      # Those inputs are used to customize the CI workflow, before publishing the plugin.
      # They should match with the ones used in CI (ci.yml/push.yml).

      # Custom tooling versions. The default values are in the env section of ci.yml.
      go-version:
        description: Go version to use
        type: string
        required: false
      node-version:
        description: Node.js version to use
        type: string
        required: false
      golangci-lint-version:
        description: golangci-lint version to use
        type: string
        required: false
      trufflehog-version:
        description: Trufflehog version to use
        type: string
        required: false

      # Build options.
      plugin-directory:
        description: Directory of the plugin, if not in the root of the repository. If provided, package-manager must also be provided.
        type: string
        required: false
        default: .
      package-manager:
        description: The package manager to use.
        type: string
        required: false
        default: ""

      # Playwright
      run-playwright:
        description: Whether to run Playwright E2E tests.
        type: boolean
        required: false
        default: true
      run-playwright-docker:
        description: Whether to run dockerized Playwright E2E tests.
        type: boolean
        required: false
        default: false
      # https://github.com/grafana/plugin-actions/blob/main/e2e-version/action.yml
      run-playwright-with-grafana-dependency:
        description: "Optionally, use this input to pass a semver range of supported Grafana versions to test against. This is only used when version-resolver-type is plugin-grafana-dependency. If not provided, the action will try to read grafanaDependency from the plugin.json file."
        type: string
        required: false
      run-playwright-with-skip-grafana-dev-image:
        description: "Optionally, you can skip the Grafana dev image"
        type: boolean
        required: false
        default: false
      run-playwright-with-version-resolver-type:
        description: Define which version resolver type to use for Playwright E2E tests.
        type: string
        required: false
        default: plugin-grafana-dependency
      upload-playwright-artifacts:
        description: |
          If true, the Playwright E2E artifacts will be uploaded to GitHub.
          Default is false.
          IMPORTANT: Make sure there are no unmasked secrets in the E2E tests before turning this on.
        required: false
        type: boolean
        default: false
      playwright-report-path:
        required: false
        type: string
        description: Path to the folder to use to upload the artifacts
        default: playwright-report/
      playwright-docker-compose-file:
        required: false
        type: string
        description: Path to the docker-compose file to use for testing
      playwright-config:
        required: false
        type: string
        default: playwright.config.ts
        description: Path to the Playwright config file to use for testing
      playwright-grafana-url:
        description: The URL where Grafana is available at when running Playwright tests
        type: string
        required: false
        default: http://localhost:3000/

      # Trufflehog
      run-trufflehog:
        description: Whether to run Trufflehog secrets scanning.
        type: boolean
        required: false
        default: true
      trufflehog-include-detectors:
        description: |
          Comma-separated list of detector types to include.
          Protobuf name or IDs may be used, as well as ranges.
          This value will be passed via the `--include-detectors` option to Trufflehog.
          If not provided, the flag is not passed.
        type: string
        required: false
      trufflehog-exclude-detectors:
        description: |
          Comma-separated list of detector types to exclude.
          Protobuf name or IDs may be used, as well as ranges.
          IDs defined here take precedence over the include list.
          This value will be passed via the `--exclude-detectors` option to Trufflehog.
          If not provided, the flag is not passed.
        type: string
        required: false

      # Artifacts attestation for build provenance
      attestation:
        description: Create a verifiable attestation for the plugin using Github OIDC.
        type: boolean
        required: false

      # User inputs
      plugin-version-suffix:
        description: |
          Suffix to append to plugin version before building it, which will be separated by a "+" sign.
          For example `abcdef` will set the plugin version to `1.2.3+abcdef`.
          Useful for giving a unique version to the plugin built from a PR.

          If not set (empty):
          - On `main` inputs.branch, the version will be the same as the one in plugin.json.
          - On other branches, the version of the final plugin will the `<VERSION_IN_PLUGIN_JSON>+<HEAD_COMMIT_SHA>`.
        type: string
        required: false
      environment:
        description: |
          Environment(s) to publish to.
          Can be 'none' (or empty string), 'dev', 'ops', or 'prod'.

          Publishing to 'ops' will also deploy to 'dev'.
          Publishing to 'prod' will also deploy to 'ops' and 'dev'.
          Setting it to 'none' will skip the deployment and run CI only.

          Docs will only be published to the website when targeting 'prod'.
        required: true
        type: string
      docs-only:
        description: |
          Only publish docs to the website, do not publish the plugin.
        default: false
        type: boolean
      argo-workflow-slack-channel:
        description: |
          Slack channel to use for Argo Workflow deployment notifications.
          This is only used when deploying to Grafana Cloud.
          Default is '#grafana-plugins-platform-ci'.
        default: "#grafana-plugins-platform-ci"
        type: string
      auto-merge-environments:
        description: |
          Comma separated list of environments to auto-merge when deploying to Grafana Cloud via Argo.
          Supported values are 'dev' and 'ops'.
          'prod-canary' and 'prod' will never be auto-merged.
          Default is 'dev'.
        default: dev
        type: string

      # Options for deploying PRs. Those values should come from the PR event and should not be set manually.
      branch:
        description: Branch to publish from. Can be used to deploy PRs to dev.
        default: main
        type: string

concurrency:
  group: cd-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write
  attestations: write

env:
  VAULT_INSTANCE: ops
  GCS_ARTIFACTS_BUCKET: integration-artifacts

jobs:
  setup:
    name: Check and setup environment
    runs-on: ubuntu-latest

    outputs:
      commit-sha: ${{ steps.checkout-specified-branch.outputs.commit }}
      plugin-version-suffix: ${{ steps.plugin-version-suffix.outputs.plugin_version_suffix }}

    steps:
      - name: Check environment
        run: |
          if [ -n "${ENVIRONMENT}" ] && [ "${ENVIRONMENT}" != 'none' ] && [ "${ENVIRONMENT}" != 'dev' ] && [ "${BRANCH}" != 'main' ]; then
            echo "Only 'dev' environment is allowed for non-main branches."
            exit 1
          fi

          if [ "${DOCS_ONLY}" == 'true' ]; then
            if [ "${ENVIRONMENT}" != 'prod' ]; then
              echo "Only 'prod' environment is allowed for docs publishing."
              exit 1
            fi

            if [ "${BRANCH}" != 'main' ]; then
              echo "Only 'main' branch can be used for docs publishing."
              exit 1
            fi
          fi
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          BRANCH: ${{ inputs.branch }}
          DOCS_ONLY: ${{ inputs.docs-only }}
        shell: bash

      - name: Checkout specified branch
        id: checkout-specified-branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.branch }}
          persist-credentials: false

      - name: Determine plugin version suffix
        id: plugin-version-suffix
        run: |
          if [ -n "$INPUT_PLUGIN_VERSION_SUFFIX" ]; then
            # Give priority to the input value
            echo "plugin_version_suffix=${INPUT_PLUGIN_VERSION_SUFFIX}" >> "$GITHUB_OUTPUT"
          else
            # Default behavior:
            # - Use the commit SHA as the version suffix when not on main
            # - Otherwise, do not set the suffix
            if [ "${INPUT_BRANCH}" != 'main' ]; then
              echo "plugin_version_suffix=${COMMIT_SHA}" >> "$GITHUB_OUTPUT"
            else
              echo "plugin_version_suffix=" >> "$GITHUB_OUTPUT"
            fi
          fi
        env:
          INPUT_PLUGIN_VERSION_SUFFIX: ${{ inputs.plugin-version-suffix }}
          INPUT_BRANCH: ${{ inputs.branch }}
          COMMIT_SHA: ${{ steps.checkout-specified-branch.outputs.commit }}
        shell: bash

  ci:
    name: CI
    uses: grafana/plugin-ci-workflows/.github/workflows/ci.yml@main # zizmor: ignore[unpinned-uses]
    needs:
      - setup
    with:
      branch: ${{ inputs.branch }}
      plugin-directory: ${{ inputs.plugin-directory }}
      package-manager: ${{ inputs.package-manager }}
      go-version: ${{ inputs.go-version }}
      node-version: ${{ inputs.node-version }}
      golangci-lint-version: ${{ inputs.golangci-lint-version }}
      run-playwright: ${{ inputs.run-playwright }}
      run-playwright-docker: ${{ inputs.run-playwright-docker }}
      run-playwright-with-grafana-dependency: ${{ inputs.run-playwright-with-grafana-dependency }}
      run-playwright-with-skip-grafana-dev-image: ${{ inputs.run-playwright-with-skip-grafana-dev-image }}
      run-playwright-with-version-resolver-type: ${{ inputs.run-playwright-with-version-resolver-type }}
      upload-playwright-artifacts: ${{ inputs.upload-playwright-artifacts }}
      playwright-report-path: ${{ inputs.playwright-report-path }}
      playwright-docker-compose-file: ${{ inputs.playwright-docker-compose-file }}
      playwright-config: ${{ inputs.playwright-config }}
      playwright-grafana-url: ${{ inputs.playwright-grafana-url }}
      run-trufflehog: ${{ inputs.run-trufflehog }}
      trufflehog-version: ${{ inputs.trufflehog-version }}
      trufflehog-include-detectors: ${{ inputs.trufflehog-include-detectors }}
      trufflehog-exclude-detectors: ${{ inputs.trufflehog-exclude-detectors }}
      plugin-version-suffix: ${{ needs.setup.outputs.plugin-version-suffix }}

  build-attestation:
    name: Build attestation
    if: ${{ inputs.attestation }}
    needs:
      - ci
    runs-on: ubuntu-latest

    outputs:
      attestation-id: ${{ steps.attestation.outputs.attestation-id }}
      attestation-url: ${{ steps.attestation.outputs.attestation-url }}
      bundle-path: ${{ steps.attestation.outputs.bundle-path }}

    steps:
      - name: Download GitHub artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: dist-artifacts
          path: /tmp/dist-artifacts

      - name: Generate artifact attestation
        if: ${{ inputs.attestation }}
        id: attestation
        uses: actions/attest-build-provenance@db473fddc028af60658334401dc6fa3ffd8669fd # v2.3.0
        with:
          subject-path: /tmp/dist-artifacts/*.zip

  define-variables:
    name: Define variables
    runs-on: ubuntu-latest

    needs:
      - ci

    outputs:
      environments: ${{ steps.vars.outputs.environments }}
      publish-docs: ${{ steps.vars.outputs.publish-docs }}
      platforms: ${{ steps.vars.outputs.platforms }}

    steps:
      - name: Define variables
        id: vars
        run: |
          # Platforms matrix
          if [ "${HAS_BACKEND}" == 'true' ]; then
            platforms='["linux", "darwin", "windows", "any"]'
          else
            platforms='["any"]'
          fi
          echo "platforms=$platforms" >> "$GITHUB_OUTPUT"

          # If we are publishing docs only, we don't need to deploy the plugin
          if [ "${DOCS_ONLY}" == 'true' ]; then
            {
              echo 'environments=[]'
              echo 'publish-docs=true'
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Define environments matrix,
          # and deploy docs only if we are publishing to prod
          if [ "${ENVIRONMENT}" == 'dev' ]; then
            {
              echo 'environments=["dev"]'
              echo 'publish-docs=false'
            } >> "$GITHUB_OUTPUT"
          elif [ "${ENVIRONMENT}" == 'ops' ]; then
            {
              echo 'environments=["dev", "ops"]'
              echo 'publish-docs=false'
            } >> "$GITHUB_OUTPUT"

          elif [ "${ENVIRONMENT}" == 'prod' ]; then
            {
              echo 'environments=["dev", "ops", "prod"]'
              echo 'publish-docs=true'
            } >> "$GITHUB_OUTPUT"

          elif [ -z "${ENVIRONMENT}" ] || [ "${ENVIRONMENT}" == 'none' ]; then
            {
              echo 'environments=[]'
              echo 'publish-docs=false'
            } >> "$GITHUB_OUTPUT"

          else
            echo "Invalid environment: ${ENVIRONMENT}"
            exit 1
          fi
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          DOCS_ONLY: ${{ inputs.docs-only }}
          HAS_BACKEND: ${{ fromJSON(needs.ci.outputs.plugin).has-backend }}
        shell: bash

  publish-to-catalog:
    name: Publish to catalog (${{ matrix.environment }})
    if: ${{ !inputs.docs-only && !inputs.gcs-only && needs.define-variables.outputs.environments != '[]' }}
    needs:
      - define-variables
      - ci
    strategy:
      # Allow each stage to be deployed independently, even if others fails
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.define-variables.outputs.environments) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.branch }}
          persist-credentials: false

      - name: Login to Google Cloud (ID token for IAP)
        id: gcloud
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        if: ${{ matrix.environment != 'prod' }}
        with:
          workload_identity_provider: "projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider"
          service_account: github-plugin-ci-workflows@grafanalabs-workload-identity.iam.gserviceaccount.com
          token_format: id_token
          id_token_audience: 194555723165-aftshfqa32nig79trcrh96ha94ta46jd.apps.googleusercontent.com
          id_token_include_email: true
          create_credentials_file: false
          export_environment_variables: false

      - name: Get secrets from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]
        with:
          vault_instance: ${{ env.VAULT_INSTANCE }}
          common_secrets: |
            GCOM_PUBLISH_TOKEN_DEV=plugins/gcom-publish-token:dev
            GCOM_PUBLISH_TOKEN_OPS=plugins/gcom-publish-token:ops
            GCOM_PUBLISH_TOKEN_PROD=plugins/gcom-publish-token:prod

      - name: Determine which token to use
        run: |
          if [ "${ENVIRONMENT}" == 'dev' ]; then
            echo "Picked dev token"
            token="${{ env.GCOM_PUBLISH_TOKEN_DEV }}"
          elif [ "${ENVIRONMENT}" == 'ops' ]; then
            echo "Picked ops token"
            token="${{ env.GCOM_PUBLISH_TOKEN_OPS }}"
          elif [ "${ENVIRONMENT}" == 'prod' ]; then
            echo "Picked prod token"
            token="${{ env.GCOM_PUBLISH_TOKEN_PROD }}"
          else
            echo "Invalid environment: ${ENVIRONMENT}"
            exit 1
          fi
          echo "GCOM_PUBLISH_TOKEN=$token" >> "$GITHUB_ENV"
        shell: bash
        env:
          ENVIRONMENT: ${{ matrix.environment }}

      - name: Check and create stub
        uses: grafana/plugin-ci-workflows/actions/plugins/publish/check-and-create-stub@main # zizmor: ignore[unpinned-uses]
        if: ${{ matrix.environment != 'prod' }}
        with:
          plugin-id: ${{ fromJSON(needs.ci.outputs.plugin).id }}
          environment: ${{ matrix.environment }}
          gcom-publish-token: ${{ env.GCOM_PUBLISH_TOKEN }}
          gcloud-auth-token: ${{ steps.gcloud.outputs.id_token }}

      - name: Publish to catalog
        uses: grafana/plugin-ci-workflows/actions/plugins/publish/publish@main # zizmor: ignore[unpinned-uses]
        with:
          zips: ${{ needs.ci.outputs.gcs-zip-urls-commit }}
          environment: ${{ matrix.environment }}
          scopes: ${{ inputs.scopes }}
          gcom-publish-token: ${{ env.GCOM_PUBLISH_TOKEN }}
          gcloud-auth-token: ${{ steps.gcloud.outputs.id_token }}

  trigger-argo-workflow:
    name: Trigger Argo Workflow for Grafana Cloud deployment
    runs-on: ubuntu-latest

    needs:
      - ci
      - publish-to-catalog

    if: ${{ inputs.grafana-cloud-deployment-type != '' }}

    # Allow the job to fail because this is opt-in and experimental.
    # TODO: remove once the workflow is stable.
    continue-on-error: true

    steps:
      - name: Check deployment type
        # Right now we only support provisioned plugins.
        # In the future, we will support managed plugins as well.
        run: |
          if [ "${GRAFANA_CLOUD_DEPLOYMENT_TYPE}" != 'provisioned' ]; then
            echo "Invalid deployment type '${GRAFANA_CLOUD_DEPLOYMENT_TYPE}', must be 'provisioned'"
            exit 1
          fi
        env:
          GRAFANA_CLOUD_DEPLOYMENT_TYPE: ${{ inputs.grafana-cloud-deployment-type }}
        shell: bash

      - name: Trigger Argo Workflow
        uses: grafana/shared-workflows/actions/trigger-argo-workflow@main # zizmor: ignore[unpinned-uses]
        with:
          namespace: grafana-plugins-cd
          workflow_template: grafana-plugins-deploy
          parameters: |
            slug=${{ fromJSON(needs.ci.outputs.plugin).id }}
            version=${{ fromJSON(needs.ci.outputs.plugin).version }}
            environment=${{ inputs.environment }}
            slack_channel=${{ inputs.argo-workflow-slack-channel }}
            commit=${{ github.sha }}
            commit_link=https://${{ github.repository_owner }}/${{ github.event.repository.name }}/commit/${{ github.sha }}
            auto_merge_environments=${{ inputs.auto-merge-environments }}

  # Note: This job can be removed once provisioned plugins releases are moved to the
  # tailored plugins catalog instead of using GCS.
  upload-to-gcs-release:
    name: Upload to GCS (release)
    runs-on: ubuntu-latest

    needs:
      - ci
      - define-variables

    if: ${{ !inputs.docs-only && needs.define-variables.outputs.environments != '[]' }}

    strategy:
      matrix:
        platform: ${{ fromJson(needs.define-variables.outputs.platforms) }}

    steps:
      - name: Download GitHub artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: dist-artifacts
          path: /tmp/dist-artifacts

      - name: Prepare "latest" artifacts
        run: |
          cp -r /tmp/dist-artifacts /tmp/dist-artifacts-latest
          # Replace the version with "latest" in the zip file name
          find /tmp/dist-artifacts-latest -type f -exec bash -c 'mv "$1" "${1//${PLUGIN_VERSION}/latest}"' _ {} \;
        env:
          PLUGIN_VERSION: ${{ fromJSON(needs.ci.outputs.plugin).version }}
        shell: bash

      - name: Login to Google Cloud
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          workload_identity_provider: "projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider"
          service_account: github-plugin-ci-workflows@grafanalabs-workload-identity.iam.gserviceaccount.com

      - name: Determine GCS artifacts paths
        id: paths
        run: |
          gcs_artifacts_release_base="${{ env.GCS_ARTIFACTS_BUCKET }}/${PLUGIN_ID}/release"
          {
            echo "gcs_artifacts_release_base=$gcs_artifacts_release_base"
            echo "gcs_artifacts_release_path_latest=$gcs_artifacts_release_base/latest"
            echo "gcs_artifacts_release_path_tag=$gcs_artifacts_release_base/${PLUGIN_VERSION}"
            fn=$(basename "${GCS_UNIVERSAL_ZIP_URL_COMMIT}")
            latest_fn=${fn//${PLUGIN_VERSION}/latest}
            if [ "${PLATFORM}" == 'any' ]; then
              echo "gcs_upload_glob=$fn*"
              echo "gcs_upload_glob_latest=$latest_fn*"
            else
              # strip the extension (.zip) and append the platform instead
              echo "gcs_upload_glob=${fn%.*}.${PLATFORM}*"
              echo "gcs_upload_glob_latest=${latest_fn%.*}.${PLATFORM}*"
            fi
          } >> "$GITHUB_OUTPUT"
        env:
          PLATFORM: ${{ matrix.platform }}
          PLUGIN_ID: ${{ fromJSON(needs.ci.outputs.plugin).id }}
          PLUGIN_VERSION: ${{ fromJSON(needs.ci.outputs.plugin).version }}
          GCS_UNIVERSAL_ZIP_URL_COMMIT: ${{ needs.ci.outputs.gcs-universal-zip-url-commit }}
        shell: bash

      - name: Upload GCS release artifact (tag)
        uses: google-github-actions/upload-cloud-storage@7c6e11cb7291594c5dfe0bc1dd9cd905e31e600c # v2.2.2
        with:
          path: /tmp/dist-artifacts
          glob: ${{ steps.paths.outputs.gcs_upload_glob }}
          destination: "${{ steps.paths.outputs.gcs_artifacts_release_path_tag }}/${{ matrix.platform }}"
          parent: false
          process_gcloudignore: false

      - name: Upload GCS release artifact (latest)
        uses: google-github-actions/upload-cloud-storage@7c6e11cb7291594c5dfe0bc1dd9cd905e31e600c # v2.2.2
        with:
          path: /tmp/dist-artifacts-latest
          glob: ${{ steps.paths.outputs.gcs_upload_glob_latest }}
          destination: "${{ steps.paths.outputs.gcs_artifacts_release_path_latest }}/${{ matrix.platform }}"
          parent: false
          process_gcloudignore: false

      - name: Upload GCS release artifacts (latest, any)
        if: ${{ matrix.platform == 'any' }}
        uses: google-github-actions/upload-cloud-storage@7c6e11cb7291594c5dfe0bc1dd9cd905e31e600c # v2.2.2
        with:
          path: /tmp/dist-artifacts-latest/${{ fromJSON(needs.ci.outputs.plugin).id }}-latest.zip
          destination: "${{ steps.paths.outputs.gcs_artifacts_release_path_latest }}"
          parent: false
          process_gcloudignore: false

  publish-docs:
    name: Publish docs
    needs:
      - define-variables
      - ci
      # Update the docs only after a successful GCOM deployment
      # This dependency can be skipped if gcs-only is true. In that case, this step
      # is still executed due to the "!(failure() || cancelled())" condition.
      - publish-to-catalog
    if: >-
      ${{
        (needs.ci.outputs.has-docs == 'true')
        && (needs.define-variables.outputs.publish-docs == 'true')
        && !(failure() || cancelled())
      }}
    runs-on: ubuntu-latest
    container:
      image: grafana/docs-base:latest
      volumes:
        # This mount is required in order to run the "plugins/docs/test" shared action
        # into the container. The action gets downloaded into /home/runner/work/_actions,
        # which is normally outside of the container's filesystem.
        - /home/runner/work/_actions:/home/runner/work/_actions
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.branch }}
          persist-credentials: false

      - name: Get secrets from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]
        with:
          vault_instance: ${{ env.VAULT_INSTANCE }}
          common_secrets: |
            GITHUB_APP_ID=plugins-platform-bot-app:app-id
            GITHUB_APP_PRIVATE_KEY=plugins-platform-bot-app:private-key

      - name: Generate GitHub token
        id: generate-github-token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        with:
          app-id: ${{ env.GITHUB_APP_ID }}
          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Publish docs
        uses: grafana/plugin-ci-workflows/actions/plugins/docs/publish@main # zizmor: ignore[unpinned-uses]
        with:
          id: ${{ fromJSON(needs.ci.outputs.plugin).id }}
          version: ${{ fromJSON(needs.ci.outputs.plugin).version }}
          github-token: x-access-token:${{ steps.generate-github-token.outputs.token }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - define-variables
      - ci
      # Create the release only after a successful GCOM deployment
      # This dependency can be skipped if gcs-only is true. In that case, this step
      # is still executed due to the "!(failure() || cancelled())" condition.
      - publish-to-catalog
    if: >-
      ${{
        contains(fromJSON(needs.define-variables.outputs.environments), 'prod')
        && !(failure() || cancelled())
      }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.branch }}
          persist-credentials: false

      - name: Download GitHub artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: dist-artifacts
          path: /tmp/dist-artifacts

      - name: Parse changelog
        id: changelog
        uses: grafana/plugin-ci-workflows/actions/plugins/changelog@main # zizmor: ignore[unpinned-uses]
        with:
          changelog-path: ${{ inputs.plugin-directory }}/CHANGELOG.md

      - name: Print changelog
        run: |
          cat <<EOF
          ${CHANGELOG}
          EOF
        env:
          CHANGELOG: ${{ steps.changelog.outputs.changelog }}
        shell: bash

      - name: Create tag
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        # Allow the tag creation to fail, in case it already exists
        # (e.g.: created manually, or re-triggering a release).
        continue-on-error: true
        with:
          script: |
            const { PLUGIN_VERSION } = process.env
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/v${PLUGIN_VERSION}`,
              sha: context.sha
            })
        env:
          PLUGIN_VERSION: ${{ fromJSON(needs.ci.outputs.plugin).version }}

      - name: Create Github release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
        with:
          draft: true
          name: ${{ fromJSON(needs.ci.outputs.plugin).id }} v${{ fromJSON(needs.ci.outputs.plugin).version }}
          tag_name: v${{ fromJSON(needs.ci.outputs.plugin).version }}
          files: |
            /tmp/dist-artifacts/*.zip
            /tmp/dist-artifacts/*.zip.sha1
          fail_on_unmatched_files: true
          body: ${{ steps.changelog.outputs.changelog }}
