# Description:
# Publishes the plugin to the Grafana Plugin Catalog.
# The plugin must be built via the "ci" workflow before running this workflow.
# It does the following steps:
#  - Publishes the plugin to 'dev', 'ops', and 'prod' catalogs.
#  - ('prod' target only) Publishes docs to the website, if they exist.
#  - ('prod' target only) Creates a lightweight Git tag and a drafts a new GitHub.
#
#  This workflow can also publish a PR (or any other non-main branch), but only to the 'dev' catalog.

name: Plugins - Publish plugin

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stag
          - prod
      plugin_id:
        description: 'Plugin ID to promote'
        required: true
        type: string
      plugin_version:
        description: 'Plugin version to promote'
        required: true
        type: string

jobs:
  promote:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Login to Google Cloud (ID token for IAP)
        id: gcloud
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        if: ${{ inputs.environment != 'prod' }}
        with:
          workload_identity_provider: "projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider"
          service_account: github-plugin-ci-workflows@grafanalabs-workload-identity.iam.gserviceaccount.com
          token_format: id_token
          id_token_audience: 194555723165-aftshfqa32nig79trcrh96ha94ta46jd.apps.googleusercontent.com
          id_token_include_email: true
          create_credentials_file: false
          export_environment_variables: false

      - name: Get secrets from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@9f37f656e063f0ad0b0bfc38d49894b57d363936 # v1.2.1
        with:
          vault_instance: ${{ env.VAULT_INSTANCE }}
          common_secrets: |
            GCOM_PUBLISH_TOKEN_DEV=plugins/gcom-publish-token:dev
            GCOM_PUBLISH_TOKEN_OPS=plugins/gcom-publish-token:ops
            GCOM_PUBLISH_TOKEN_PROD=plugins/gcom-publish-token:prod
          export_env: false

      - name: Determine which token to use
        run: |
          if [ "${ENVIRONMENT}" == 'dev' ]; then
            echo "Picked dev token"
            token="${{ fromJSON(steps.get-secrets.outputs.secrets).GCOM_PUBLISH_TOKEN_DEV }}"
          elif [ "${ENVIRONMENT}" == 'ops' ]; then
            echo "Picked ops token"
            token="${{ fromJSON(steps.get-secrets.outputs.secrets).GCOM_PUBLISH_TOKEN_OPS }}"
          elif [ "${ENVIRONMENT}" == 'prod' ]; then
            echo "Picked prod token"
            token="${{ fromJSON(steps.get-secrets.outputs.secrets).GCOM_PUBLISH_TOKEN_PROD }}"
          else
            echo "Invalid environment: ${ENVIRONMENT}"
            exit 1
          fi
          echo "GCOM_PUBLISH_TOKEN=$token" >> "$GITHUB_ENV"
        shell: bash
        env:
          ENVIRONMENT: ${{ inputs.environment }}

      - name: Verify promote inputs
        run: |
          if [ -z "${{ inputs.plugin_id }}" ]; then
            echo "Plugin ID is required"
            exit 1
          fi
          if [ -z "${{ inputs.plugin_version }}" ]; then
            echo "Plugin version is required"
            exit 1
          fi
          if [ -z "${{ inputs.environment }}" ]; then
            echo "Environment is required"
            exit 1
          fi
          if [ -z "${{ env.GCOM_PUBLISH_TOKEN }}" ]; then
            echo "GCOM_PUBLISH_TOKEN is required"
            exit 1
          fi
          if [ -z "${{ steps.gcloud.outputs.id_token }}" ]; then
            echo "GCloud auth token is required"
            exit 1
          fi

      - name: Promote plugin
        uses: grafana/plugin-ci-workflows/actions/plugins/publish/promote-plugin@add-promote-plugin-action # zizmor: ignore[unpinned-uses]
        with:
          plugin-id: ${{ inputs.plugin_id }}
          plugin-version: ${{ inputs.plugin_version }}
          environment: ${{ inputs.environment }}
          gcom-publish-token: ${{ env.GCOM_PUBLISH_TOKEN }}
          gcloud-auth-token: ${{ steps.gcloud.outputs.id_token }}
