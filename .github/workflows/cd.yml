# Description:
# Publishes the plugin to the Grafana Plugin Catalog.
# The plugin must be built via the "ci" workflow before running this workflow.
# It does the following steps:
#  - Publishes the plugin to 'dev', 'ops', and 'prod' catalogs.
#  - ('prod' target only) Publishes docs to the website, if they exist.
#  - ('prod' target only) Creates a lightweight Git tag and a drafts a new GitHub.
#
#  This workflow can also publish a PR (or any other non-main branch), but only to the 'dev' catalog.

name: Plugins - Publish plugin

on:
  workflow_call:
    inputs:
      # Those inputs can be customized depending on the plugin's needs:
      # Publishing options (GCS and/or catalog)
      gcs-only:
        description: |
          Only publish the plugin to GCS, do not publish the plugin to the Grafana Plugin Catalog.
        default: false
        type: boolean
      scopes:
        description: |
          Comma-separated list of scopes for the plugin version in the catalog.
          Default is 'universal'.
          Can also be set to 'grafana_cloud' or a list of grafana_cloud_org's or grafana_cloud_instance's like "grafana_cloud_org_{slug},grafana_cloud_org_{slug}" or "grafan_cloud_instance_{slug},grafan_cloud_instance_{slug}"
          More information about available scopes can be found here https://enghub.grafana-ops.net/docs/default/component/grafana-plugins-platform/grafana-com/gcom-cli-cheat-sheet/#scoping
        required: false
        default: universal
        type: string
      # TODO: 'managed' deployment_type will be added here in the future.
      grafana-cloud-deployment-type:
        description: |
          If set, trigger Argo Workflow to deploy the plugin to the specified environment(s) in Grafana Cloud.
          `gcs_only` must be false for this to work.

          Supported values:
            - provisioned

          Currently, this only works for provisioned plugins that have migrated to grafana_cloud-scoped plugins in the plugins catalog.
          Default is empty (do not trigger Argo Workflow).
        required: false
        default:
        type: string

      # Those inputs are used to customize the CI workflow, before publishing the plugin.
      # They should match with the ones used in CI (ci.yml/push.yml).

      # Custom tooling versions. The default values are in the env section of ci.yml.
      go-version:
        description: Go version to use
        type: string
        required: false
      node-version:
        description: Node.js version to use
        type: string
        required: false
      golangci-lint-version:
        description: golangci-lint version to use
        type: string
        required: false
      go-setup-caching:
        description: Defines if setup-go action should have caching enabled (https://github.com/actions/setup-go#caching-dependency-files-and-build-outputs)
        type: "boolean"
        required: false
      trufflehog-version:
        description: Trufflehog version to use
        type: string
        required: false

      # Build options.
      plugin-directory:
        description: Directory of the plugin, if not in the root of the repository. If provided, package-manager must also be provided.
        type: string
        required: false
        default: .
      package-manager:
        description: The package manager to use.
        type: string
        required: false
        default: ""

      # Playwright
      run-playwright:
        description: Whether to run Playwright E2E tests.
        type: boolean
        required: false
        default: true
      run-playwright-docker:
        description: Whether to run dockerized Playwright E2E tests.
        type: boolean
        required: false
        default: false
      # https://github.com/grafana/plugin-actions/blob/main/e2e-version/action.yml
      run-playwright-with-grafana-dependency:
        description: "Optionally, use this input to pass a semver range of supported Grafana versions to test against. This is only used when version-resolver-type is plugin-grafana-dependency. If not provided, the action will try to read grafanaDependency from the plugin.json file."
        type: string
        required: false
      run-playwright-with-skip-grafana-dev-image:
        description: "Optionally, you can skip the Grafana dev image"
        type: boolean
        required: false
        default: false
      run-playwright-with-version-resolver-type:
        description: Define which version resolver type to use for Playwright E2E tests.
        type: string
        required: false
        default: plugin-grafana-dependency
      upload-playwright-artifacts:
        description: |
          If true, the Playwright E2E artifacts will be uploaded to GitHub.
          Default is false.
          IMPORTANT: Make sure there are no unmasked secrets in the E2E tests before turning this on.
        required: false
        type: boolean
        default: false
      playwright-report-path:
        required: false
        type: string
        description: Path to the folder to use to upload the artifacts
        default: playwright-report/
      playwright-docker-compose-file:
        required: false
        type: string
        description: Path to the docker-compose file to use for testing
      playwright-config:
        required: false
        type: string
        default: playwright.config.ts
        description: Path to the Playwright config file to use for testing
      playwright-grafana-url:
        description: The URL where Grafana is available at when running Playwright tests
        type: string
        required: false
        default: http://localhost:3000/
      playwright-secrets:
        description: |
          The secrets to use for Playwright tests.
          This uses the grafana/shared-workflows/actions/get-vault-secrets action under the hood,
          so the syntax is the same. It fetches from the repo's secrets.
        type: string
        required: false
        default: ""

      # Trufflehog
      run-trufflehog:
        description: Whether to run Trufflehog secrets scanning.
        type: boolean
        required: false
        default: true
      trufflehog-include-detectors:
        description: |
          Comma-separated list of detector types to include.
          Protobuf name or IDs may be used, as well as ranges.
          This value will be passed via the `--include-detectors` option to Trufflehog.
          If not provided, the flag is not passed.
        type: string
        required: false
      trufflehog-exclude-detectors:
        description: |
          Comma-separated list of detector types to exclude.
          Protobuf name or IDs may be used, as well as ranges.
          IDs defined here take precedence over the include list.
          This value will be passed via the `--exclude-detectors` option to Trufflehog.
          If not provided, the flag is not passed.
        type: string
        required: false

      # Artifacts attestation for build provenance
      attestation:
        description: Create a verifiable attestation for the plugin using Github OIDC.
        type: boolean
        required: false

      # User inputs
      plugin-version-suffix:
        description: |
          Suffix to append to plugin version before building it, which will be separated by a "+" sign.
          For example `abcdef` will set the plugin version to `1.2.3+abcdef`.
          Useful for giving a unique version to the plugin built from a PR.

          If not set (empty):
          - On `main` inputs.branch, the version will be the same as the one in plugin.json.
          - On other branches, the version of the final plugin will the `<VERSION_IN_PLUGIN_JSON>+<HEAD_COMMIT_SHA>`.
        type: string
        required: false
      environment:
        description: |
          Environment(s) to publish to.
          This will decide which environment(s) are used to publish to:
          - The plugins catalog
          - Grafana Cloud (if configured)

          Allowed values:
          - `none` (or empty string): Skip deployment (run only CI)
          - `dev`: Deploy to dev catalog
          - `ops`: Deploy to ops catalog
          - `prod`: Deploy to dev AND ops AND prod
          - A comma separated combination of the values above. E.g.: `dev,ops`

          Docs will only be published to the website when targeting `prod`.
        required: true
        type: string
      docs-only:
        description: |
          Only publish docs to the website, do not publish the plugin.
        default: false
        type: boolean
      github-draft-release:
        description: |
          Publish a draft release on GitHub.
        default: true
        type: boolean
      argo-workflow-slack-channel:
        description: |
          Slack channel to use for Argo Workflow deployment notifications.
          This is only used when deploying to Grafana Cloud.
          Default is '#grafana-plugins-platform-ci'.
        default: "#grafana-plugins-platform-ci"
        type: string
      auto-merge-environments:
        description: |
          Comma separated list of environments to auto-merge when deploying to Grafana Cloud via Argo.
          Supported values are 'dev' and 'ops'.
          'prod-canary' and 'prod' will never be auto-merged.
          Default is 'dev'.
        default: dev
        type: string

      # Options for deploying PRs. Those values should come from the PR event and should not be set manually.
      branch:
        description: Branch to publish from. Can be used to deploy PRs to dev.
        default: main
        type: string

concurrency:
  group: cd-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write
  attestations: write

env:
  VAULT_INSTANCE: ops
  GCS_ARTIFACTS_BUCKET: integration-artifacts

jobs:
  setup:
    name: Check and setup environment
    runs-on: ubuntu-latest

    outputs:
      commit-sha: ${{ steps.checkout-specified-branch.outputs.commit }}
      plugin-version-suffix: ${{ steps.plugin-version-suffix.outputs.plugin_version_suffix }}

    steps:
      - name: Check environment
        run: |
          #if [ -n "${ENVIRONMENT}" ] && [ "${ENVIRONMENT}" != 'none' ] && [ "${ENVIRONMENT}" != 'dev' ] && [ "${BRANCH}" != 'main' ]; then
          #  echo "Only 'dev' environment is allowed for non-main branches."
          #  exit 1
          #fi

          if [ "${DOCS_ONLY}" == 'true' ]; then
            if [ "${ENVIRONMENT}" != 'prod' ]; then
              echo "Only 'prod' environment is allowed for docs publishing."
              exit 1
            fi

            if [ "${BRANCH}" != 'main' ]; then
              echo "Only 'main' branch can be used for docs publishing."
              exit 1
            fi
          fi
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          BRANCH: ${{ inputs.branch }}
          DOCS_ONLY: ${{ inputs.docs-only }}
        shell: bash

      - name: Checkout specified branch
        id: checkout-specified-branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.branch }}
          persist-credentials: false

      - name: Determine plugin version suffix
        id: plugin-version-suffix
        run: |
          if [ -n "$INPUT_PLUGIN_VERSION_SUFFIX" ]; then
            # Give priority to the input value
            echo "plugin_version_suffix=${INPUT_PLUGIN_VERSION_SUFFIX}" >> "$GITHUB_OUTPUT"
          else
            # Default behavior:
            # - Use the commit SHA as the version suffix when not on main
            # - Otherwise, do not set the suffix
            if [ "${INPUT_BRANCH}" != 'main' ]; then
              echo "plugin_version_suffix=${COMMIT_SHA}" >> "$GITHUB_OUTPUT"
            else
              echo "plugin_version_suffix=" >> "$GITHUB_OUTPUT"
            fi
          fi
        env:
          INPUT_PLUGIN_VERSION_SUFFIX: ${{ inputs.plugin-version-suffix }}
          INPUT_BRANCH: ${{ inputs.branch }}
          COMMIT_SHA: ${{ steps.checkout-specified-branch.outputs.commit }}
        shell: bash

  ci:
    name: CI
    uses: grafana/plugin-ci-workflows/.github/workflows/ci.yml@ci-cd-workflows/v1.1.2 # release-please-version
    needs:
      - setup
    with:
      branch: ${{ inputs.branch }}
      plugin-directory: ${{ inputs.plugin-directory }}
      package-manager: ${{ inputs.package-manager }}
      go-version: ${{ inputs.go-version }}
      go-setup-caching: ${{ inputs.go-setup-caching }}
      node-version: ${{ inputs.node-version }}
      golangci-lint-version: ${{ inputs.golangci-lint-version }}
      run-playwright: ${{ inputs.run-playwright }}
      run-playwright-docker: ${{ inputs.run-playwright-docker }}
      run-playwright-with-grafana-dependency: ${{ inputs.run-playwright-with-grafana-dependency }}
      run-playwright-with-skip-grafana-dev-image: ${{ inputs.run-playwright-with-skip-grafana-dev-image }}
      run-playwright-with-version-resolver-type: ${{ inputs.run-playwright-with-version-resolver-type }}
      upload-playwright-artifacts: ${{ inputs.upload-playwright-artifacts }}
      playwright-report-path: ${{ inputs.playwright-report-path }}
      playwright-docker-compose-file: ${{ inputs.playwright-docker-compose-file }}
      playwright-config: ${{ inputs.playwright-config }}
      playwright-grafana-url: ${{ inputs.playwright-grafana-url }}
      playwright-secrets: ${{ inputs.playwright-secrets }}
      run-trufflehog: ${{ inputs.run-trufflehog }}
      trufflehog-version: ${{ inputs.trufflehog-version }}
      trufflehog-include-detectors: ${{ inputs.trufflehog-include-detectors }}
      trufflehog-exclude-detectors: ${{ inputs.trufflehog-exclude-detectors }}
      plugin-version-suffix: ${{ needs.setup.outputs.plugin-version-suffix }}

  build-attestation:
    name: Build attestation
    if: ${{ inputs.attestation }}
    needs:
      - ci
    runs-on: ubuntu-latest

    outputs:
      attestation-id: ${{ steps.attestation.outputs.attestation-id }}
      attestation-url: ${{ steps.attestation.outputs.attestation-url }}
      bundle-path: ${{ steps.attestation.outputs.bundle-path }}

    steps:
      - name: Download GitHub artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: dist-artifacts
          path: /tmp/dist-artifacts

      - name: Generate artifact attestation
        if: ${{ inputs.attestation }}
        id: attestation
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        with:
          subject-path: /tmp/dist-artifacts/*.zip

  define-variables:
    name: Define variables
    runs-on: ubuntu-latest

    needs:
      - ci

    outputs:
      environments: ${{ steps.vars.outputs.environments }}
      publish-docs: ${{ steps.vars.outputs.publish-docs }}
      platforms: ${{ steps.vars.outputs.platforms }}

    steps:
      - name: Define variables
        id: vars
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            // Helper to get input/env values
            function getInput(name, fallback = '') {
              return process.env[name] !== undefined ? process.env[name] : fallback;
            }

            const ENVIRONMENT = getInput('ENVIRONMENT', 'none');
            const DOCS_ONLY = getInput('DOCS_ONLY');
            const HAS_BACKEND = getInput('HAS_BACKEND');

            // Platforms matrix
            let platforms = ['any'];
            if (HAS_BACKEND === 'true') {
              platforms = ['linux', 'darwin', 'windows', 'any'];
            }
            core.setOutput('platforms', JSON.stringify(platforms));

            // Docs only: skip plugin deployment
            if (DOCS_ONLY === 'true') {
              core.setOutput('environments', JSON.stringify([]));
              core.setOutput('publish-docs', 'true');
              return;
            }

            // Special case to skip deployment
            if (ENVIRONMENT === 'none') {
              core.setOutput('environments', JSON.stringify([]));
              core.setOutput('publish-docs', 'false');
              return;
            }

            // Parse and filter environments
            const allowedEnvironments = ['dev', 'ops', 'prod'];
            let environments = [];
            environments = ENVIRONMENT.split(',')
              .map(e => e.trim())
              .filter(e => allowedEnvironments.includes(e));

            // Special case: 'prod' means we deploy to all environments
            if (environments.includes('prod')) {
              environments = allowedEnvironments;
            }

            // Remove duplicates and sort
            environments = Array.from(new Set(environments)).sort();

            if (environments.length === 0) {
              core.setFailed(`Invalid environment(s): ${ENVIRONMENT}`);
              return;
            }

            // publish-docs is true if 'prod' is in the environments list
            const publishDocs = environments.includes('prod');
            core.setOutput('environments', JSON.stringify(environments));
            core.setOutput('publish-docs', String(publishDocs));
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          DOCS_ONLY: ${{ inputs.docs-only }}
          HAS_BACKEND: ${{ fromJSON(needs.ci.outputs.plugin).has-backend }}

  publish-to-catalog:
    name: Publish to catalog (${{ matrix.environment }})
    if: ${{ !inputs.docs-only && !inputs.gcs-only && needs.define-variables.outputs.environments != '[]' }}
    needs:
      - define-variables
      - upload-to-gcs-release
      - ci
    strategy:
      # Allow each stage to be deployed independently, even if others fails
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.define-variables.outputs.environments) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.branch }}
          persist-credentials: false

      - name: Determine if it should continue the pipeline if a publishing conflict was detected
        id: determine-continue
        run: |
          # when we deploy to prod, we also deploy to ops and dev by default
          # when deploying to prod we ignore conflict errors in ops and dev
          # because it is likely the plugin was deployed previously to those environments for testing
          # we don't allow prod to fail on republishing
          if [ "${is_cd_to_prod}" == 'true' ] && [ "${current_environment}" != 'prod' ]; then
            echo "ignore_conflicts=true" >> "$GITHUB_OUTPUT"
          else
            echo "ignore_conflicts=false" >> "$GITHUB_OUTPUT"
          fi
        env:
          is_cd_to_prod: ${{ contains(needs.define-variables.outputs.environments, 'prod') }}
          current_environment: ${{ matrix.environment }}

      - name: Login to Google Cloud (ID token for IAP)
        id: gcloud
        uses: google-github-actions/auth@b7593ed2efd1c1617e1b0254da33b86225adb2a5 # v2.1.12
        if: ${{ matrix.environment != 'prod' }}
        with:
          workload_identity_provider: "projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider"
          service_account: github-plugin-ci-workflows@grafanalabs-workload-identity.iam.gserviceaccount.com
          token_format: id_token
          id_token_audience: 194555723165-aftshfqa32nig79trcrh96ha94ta46jd.apps.googleusercontent.com
          id_token_include_email: true
          create_credentials_file: false
          export_environment_variables: false

      - name: Get secrets from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@get-vault-secrets/v1.2.1
        with:
          vault_instance: ${{ env.VAULT_INSTANCE }}
          common_secrets: |
            GCOM_PUBLISH_TOKEN_DEV=plugins/gcom-publish-token:dev
            GCOM_PUBLISH_TOKEN_OPS=plugins/gcom-publish-token:ops
            GCOM_PUBLISH_TOKEN_PROD=plugins/gcom-publish-token:prod
          export_env: false

      - name: Determine which token to use
        run: |
          if [ "${ENVIRONMENT}" == 'dev' ]; then
            echo "Picked dev token"
            token="${{ fromJSON(steps.get-secrets.outputs.secrets).GCOM_PUBLISH_TOKEN_DEV }}"
          elif [ "${ENVIRONMENT}" == 'ops' ]; then
            echo "Picked ops token"
            token="${{ fromJSON(steps.get-secrets.outputs.secrets).GCOM_PUBLISH_TOKEN_OPS }}"
          elif [ "${ENVIRONMENT}" == 'prod' ]; then
            echo "Picked prod token"
            token="${{ fromJSON(steps.get-secrets.outputs.secrets).GCOM_PUBLISH_TOKEN_PROD }}"
          else
            echo "Invalid environment: ${ENVIRONMENT}"
            exit 1
          fi
          echo "GCOM_PUBLISH_TOKEN=$token" >> "$GITHUB_ENV"
        shell: bash
        env:
          ENVIRONMENT: ${{ matrix.environment }}

      - name: Check and create stub
        uses: grafana/plugin-ci-workflows/actions/plugins/publish/check-and-create-stub@ci-cd-workflows/v1.1.2 # release-please-version
        if: ${{ matrix.environment != 'prod' }}
        with:
          plugin-id: ${{ fromJSON(needs.ci.outputs.plugin).id }}
          environment: ${{ matrix.environment }}
          gcom-publish-token: ${{ env.GCOM_PUBLISH_TOKEN }}
          gcloud-auth-token: ${{ steps.gcloud.outputs.id_token }}

      - name: Check artifact ZIP(s)
        uses: grafana/plugin-ci-workflows/actions/plugins/publish/check-artifacts@ci-cd-workflows/v1.1.2 # release-please-version
        with:
          zips: ${{ needs.upload-to-gcs-release.outputs.gcs-zip-urls }}
          plugin-id: ${{ fromJSON(needs.ci.outputs.plugin).id }}

      - name: Publish to catalog
        # TODO: which ref??
        uses: grafana/plugin-ci-workflows/actions/plugins/publish/publish@main
        with:
          zips: ${{ needs.upload-to-gcs-release.outputs.gcs-zip-urls }}
          environment: ${{ matrix.environment }}
          scopes: ${{ inputs.scopes }}
          gcom-publish-token: ${{ env.GCOM_PUBLISH_TOKEN }}
          gcloud-auth-token: ${{ steps.gcloud.outputs.id_token }}
          ignore-conflicts: ${{ steps.determine-continue.outputs.ignore_conflicts }}

  trigger-argo-workflow:
    name: Trigger Argo Workflow for Grafana Cloud deployment
    runs-on: ubuntu-latest

    needs:
      - ci
      - publish-to-catalog

    if: ${{ inputs.grafana-cloud-deployment-type != '' }}

    # Allow the job to fail because this is opt-in and experimental.
    # TODO: remove once the workflow is stable.
    continue-on-error: true

    steps:
      - name: Check deployment type
        # Right now we only support provisioned plugins.
        # In the future, we will support managed plugins as well.
        run: |
          if [ "${GRAFANA_CLOUD_DEPLOYMENT_TYPE}" != 'provisioned' ]; then
            echo "Invalid deployment type '${GRAFANA_CLOUD_DEPLOYMENT_TYPE}', must be 'provisioned'"
            exit 1
          fi
        env:
          GRAFANA_CLOUD_DEPLOYMENT_TYPE: ${{ inputs.grafana-cloud-deployment-type }}
        shell: bash

      - name: Prepare parameters
        id: argo-parameters
        run: |
          # Replace commas with '+' for list-like parameters.
          # This is required because the trigger-argo-workflow shared action
          # doesn't handle parameters with commas in them properly, so we replace them with '+'.
          echo "environment=${ENVIRONMENT//,/+}" >> "$GITHUB_OUTPUT"
          echo "auto_merge_environments=${AUTO_MERGE_ENVIRONMENTS//,/+}" >> "$GITHUB_OUTPUT"
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          AUTO_MERGE_ENVIRONMENTS: ${{ inputs.auto-merge-environments }}
        shell: bash

      - name: Trigger Argo Workflow
        id: trigger-argo-workflow
        uses: grafana/shared-workflows/actions/trigger-argo-workflow@trigger-argo-workflow/v1.1.2
        with:
          namespace: grafana-plugins-cd
          workflow_template: grafana-plugins-deploy
          parameters: |
            slug=${{ fromJSON(needs.ci.outputs.plugin).id }}
            version=${{ fromJSON(needs.ci.outputs.plugin).version }}
            environment=${{ steps.argo-parameters.outputs.environment }}
            slack_channel=${{ inputs.argo-workflow-slack-channel }}
            commit=${{ github.sha }}
            commit_link=https://${{ github.repository_owner }}/${{ github.event.repository.name }}/commit/${{ github.sha }}
            auto_merge_environments=${{ steps.argo-parameters.outputs.auto_merge_environments }}

      - name: Print job summary
        run: |
          echo "# 🐙 Grafana Cloud deployment via Argo Workflows

          A deployment to Grafana Cloud via the plugins CD Argo Workflow has successfully been triggered.
          - Plugin Version: \`${PLUGIN_VERSION}\`
          - Environment(s): \`${ENVIRONMENT}\`

          **👉 You can follow the deployment [here](${ARGO_WORKFLOW_URI})**
          " >> "$GITHUB_STEP_SUMMARY"
        shell: bash
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          PLUGIN_VERSION: ${{ fromJSON(needs.ci.outputs.plugin).version }}
          ARGO_WORKFLOW_URI: ${{ steps.trigger-argo-workflow.outputs.uri }}

  # Note: This job can be removed once provisioned plugins releases are moved to the
  # tailored plugins catalog instead of using GCS.
  upload-to-gcs-release:
    name: Upload to GCS (release)
    runs-on: ubuntu-latest

    needs:
      - ci
      - define-variables

    if: ${{ !inputs.docs-only && needs.define-variables.outputs.environments != '[]' }}

    outputs:
      gcs-zip-urls: ${{ steps.generate-urls.outputs.gcs-zip-urls }}

    strategy:
      matrix:
        platform: ${{ fromJson(needs.define-variables.outputs.platforms) }}

    steps:
      - name: Download GitHub artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: dist-artifacts
          path: /tmp/dist-artifacts

      - name: Prepare "latest" artifacts
        run: |
          cp -r /tmp/dist-artifacts /tmp/dist-artifacts-latest
          # Replace the version with "latest" in the zip file name
          find /tmp/dist-artifacts-latest -type f -exec bash -c 'mv "$1" "${1//${PLUGIN_VERSION}/latest}"' _ {} \;
        env:
          PLUGIN_VERSION: ${{ fromJSON(needs.ci.outputs.plugin).version }}
        shell: bash

      - name: Login to Google Cloud
        uses: google-github-actions/auth@b7593ed2efd1c1617e1b0254da33b86225adb2a5 # v2.1.12
        with:
          workload_identity_provider: "projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider"
          service_account: github-plugin-ci-workflows@grafanalabs-workload-identity.iam.gserviceaccount.com

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@6a7c903a70c8625ed6700fa299f5ddb4ca6022e9" # v2.1.5
        with:
          version: ">= 363.0.0"

      - name: Determine GCS artifacts paths
        id: paths
        run: |
          gcs_artifacts_release_base="${{ env.GCS_ARTIFACTS_BUCKET }}/${PLUGIN_ID}/release"
          {
            echo "gcs_artifacts_release_base=$gcs_artifacts_release_base"
            echo "gcs_artifacts_release_path_latest=$gcs_artifacts_release_base/latest"
            echo "gcs_artifacts_release_path_tag=$gcs_artifacts_release_base/${PLUGIN_VERSION}"
            fn=$(basename "${GCS_UNIVERSAL_ZIP_URL_COMMIT}")
            latest_fn=${fn//${PLUGIN_VERSION}/latest}
            if [ "${PLATFORM}" == 'any' ]; then
              echo "gcs_upload_glob=$fn*"
              echo "gcs_upload_glob_latest=$latest_fn*"
            else
              # strip the extension (.zip) and append the platform instead
              echo "gcs_upload_glob=${fn%.*}.${PLATFORM}*"
              echo "gcs_upload_glob_latest=${latest_fn%.*}.${PLATFORM}*"
            fi
          } >> "$GITHUB_OUTPUT"
        env:
          PLATFORM: ${{ matrix.platform }}
          PLUGIN_ID: ${{ fromJSON(needs.ci.outputs.plugin).id }}
          PLUGIN_VERSION: ${{ fromJSON(needs.ci.outputs.plugin).version }}
          GCS_UNIVERSAL_ZIP_URL_COMMIT: ${{ needs.ci.outputs.gcs-universal-zip-url-commit }}
        shell: bash

      # if an artifact already exists we don't want to overwrite it
      # this creates conflicts with checksums and will break the release
      # all environments use the same artifacts
      - name: Check if artifacts already exist
        id: gcs_artifacts_exist
        run: |
          bucket_path="gs://${GCS_ARTIFACTS_RELEASE_PATH_TAG}/${PLATFORM}/"

          echo "Checking for any existing artifacts in: $bucket_path"

          if gsutil ls "$bucket_path" 2>/dev/null | grep -q "."; then
            echo "⚠️Existing artifact found, skipping upload"
            echo "gcs_artifacts_exist=true" >> "$GITHUB_OUTPUT"
          else
            echo "✅ No existing artifacts found, proceeding with upload"
            echo "gcs_artifacts_exist=false" >> "$GITHUB_OUTPUT"
          fi
        env:
          PLATFORM: ${{ matrix.platform }}
          PLUGIN_VERSION: ${{ fromJSON(needs.ci.outputs.plugin).version }}
          GCS_ARTIFACTS_RELEASE_PATH_TAG: ${{ steps.paths.outputs.gcs_artifacts_release_path_tag }}
        shell: bash

      - name: Upload GCS release artifact (tag)
        if: ${{ steps.gcs_artifacts_exist.outputs.gcs_artifacts_exist == 'false' }}
        uses: google-github-actions/upload-cloud-storage@7c73f5d6eae167341002e9c946f7479a609c588e # v2.2.3
        with:
          path: /tmp/dist-artifacts
          glob: ${{ steps.paths.outputs.gcs_upload_glob }}
          destination: "${{ steps.paths.outputs.gcs_artifacts_release_path_tag }}/${{ matrix.platform }}"
          parent: false
          process_gcloudignore: false

      - name: Upload GCS release artifact (latest)
        if: ${{ steps.gcs_artifacts_exist.outputs.gcs_artifacts_exist == 'false' }}
        uses: google-github-actions/upload-cloud-storage@7c73f5d6eae167341002e9c946f7479a609c588e # v2.2.3
        with:
          path: /tmp/dist-artifacts-latest
          glob: ${{ steps.paths.outputs.gcs_upload_glob_latest }}
          destination: "${{ steps.paths.outputs.gcs_artifacts_release_path_latest }}/${{ matrix.platform }}"
          parent: false
          process_gcloudignore: false

      - name: Upload GCS release artifacts (latest, any)
        if: ${{ matrix.platform == 'any' && steps.gcs_artifacts_exist.outputs.gcs_artifacts_exist == 'false' }}
        uses: google-github-actions/upload-cloud-storage@7c73f5d6eae167341002e9c946f7479a609c588e # v2.2.3
        with:
          path: /tmp/dist-artifacts-latest/${{ fromJSON(needs.ci.outputs.plugin).id }}-latest.zip
          destination: "${{ steps.paths.outputs.gcs_artifacts_release_path_latest }}"
          parent: false
          process_gcloudignore: false

      # all zip artifacts are already present in /tmp/dist-artifacts
      # we can generate all the urls here in a single step
      # as a matrix job this will run for each platform
      # and we will keep the last one. They all generate the same urls.
      - name: Generate GCS release URLs
        id: generate-urls
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          GCS_ARTIFACTS_RELEASE_PATH_TAG: ${{ steps.paths.outputs.gcs_artifacts_release_path_tag }}
        with:
          script: |
            const fs = require('fs');

            const gcsPrefix = 'https://storage.googleapis.com';
            const gcsPath = process.env.GCS_ARTIFACTS_RELEASE_PATH_TAG;
            const allUrls = [];

            // Find all zip files in the artifacts directory
            const artifactsDir = '/tmp/dist-artifacts';
            const files = fs.readdirSync(artifactsDir);
            const zipFiles = files.filter(file => file.endsWith('.zip'));

            console.log(`Found ${zipFiles.length} zip files:`, zipFiles);

            // Create GCS URLs for all zip files, each in its correct platform directory
            for (const zipFile of zipFiles) {
              let targetPlatform;
              
              // Determine platform directory based on filename pattern
              switch (true) {
                case zipFile.includes('.darwin_'):
                  targetPlatform = 'darwin';
                  break;
                case zipFile.includes('.linux_'):
                  targetPlatform = 'linux';
                  break;
                case zipFile.includes('.windows_'):
                  targetPlatform = 'windows';
                  break;
                default:
                  targetPlatform = 'any';
                  break;
              }
              
              const gcsUrl = `${gcsPrefix}/${gcsPath}/${targetPlatform}/${zipFile}`;
              allUrls.push(gcsUrl);
              console.log(`Generated GCS URL: ${gcsUrl}`);
            }

            const gcsZipUrls = JSON.stringify(allUrls);
            console.log(`Generated ${allUrls.length} total URLs:`, gcsZipUrls);
            core.setOutput('gcs-zip-urls', gcsZipUrls);

  publish-docs:
    name: Publish docs
    needs:
      - define-variables
      - ci
      # Update the docs only after a successful GCOM deployment
      # This dependency can be skipped if gcs-only is true. In that case, this step
      # is still executed due to the "!(failure() || cancelled())" condition.
      - publish-to-catalog
    if: >-
      ${{
        (needs.ci.outputs.has-docs == 'true')
        && (needs.define-variables.outputs.publish-docs == 'true')
        && !(failure() || cancelled())
      }}
    runs-on: ubuntu-latest
    container:
      image: grafana/docs-base:latest # zizmor: ignore[unpinned-images]
      volumes:
        # This mount is required in order to run the "plugins/docs/test" shared action
        # into the container. The action gets downloaded into /home/runner/work/_actions,
        # which is normally outside of the container's filesystem.
        - /home/runner/work/_actions:/home/runner/work/_actions
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.branch }}
          persist-credentials: false

      - name: Get secrets from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@get-vault-secrets/v1.2.1
        with:
          vault_instance: ${{ env.VAULT_INSTANCE }}
          common_secrets: |
            GITHUB_APP_ID=plugins-platform-bot-app:app-id
            GITHUB_APP_PRIVATE_KEY=plugins-platform-bot-app:private-key

      - name: Generate GitHub token
        id: generate-github-token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        with:
          app-id: ${{ env.GITHUB_APP_ID }}
          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Publish docs
        uses: grafana/plugin-ci-workflows/actions/plugins/docs/publish@ci-cd-workflows/v1.1.2 # release-please-version
        with:
          id: ${{ fromJSON(needs.ci.outputs.plugin).id }}
          version: ${{ fromJSON(needs.ci.outputs.plugin).version }}
          github-token: x-access-token:${{ steps.generate-github-token.outputs.token }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - define-variables
      - ci
      # Create the release only after a successful GCOM deployment
      # This dependency can be skipped if gcs-only is true. In that case, this step
      # is still executed due to the "!(failure() || cancelled())" condition.
      - publish-to-catalog
    if: >-
      ${{
        contains(fromJSON(needs.define-variables.outputs.environments), 'prod')
        && !(failure() || cancelled())
      }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.branch }}
          persist-credentials: false

      - name: Download GitHub artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: dist-artifacts
          path: /tmp/dist-artifacts

      - name: Parse changelog
        id: changelog
        uses: grafana/plugin-ci-workflows/actions/plugins/changelog@ci-cd-workflows/v1.1.2 # release-please-version
        with:
          changelog-path: ${{ inputs.plugin-directory }}/CHANGELOG.md

      - name: Print changelog
        run: |
          cat <<EOF
          ${CHANGELOG}
          EOF
        env:
          CHANGELOG: ${{ steps.changelog.outputs.changelog }}
        shell: bash

      - name: Create tag
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        # Allow the tag creation to fail, in case it already exists
        # (e.g.: created manually, or re-triggering a release).
        continue-on-error: true
        with:
          script: |
            const { PLUGIN_VERSION } = process.env
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/v${PLUGIN_VERSION}`,
              sha: context.sha
            })
        env:
          PLUGIN_VERSION: ${{ fromJSON(needs.ci.outputs.plugin).version }}

      - name: Create Github release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        with:
          draft: ${{ inputs.github-draft-release }}
          name: ${{ fromJSON(needs.ci.outputs.plugin).id }} v${{ fromJSON(needs.ci.outputs.plugin).version }}
          tag_name: v${{ fromJSON(needs.ci.outputs.plugin).version }}
          files: |
            /tmp/dist-artifacts/*.zip
            /tmp/dist-artifacts/*.zip.sha1
          fail_on_unmatched_files: true
          body: ${{ steps.changelog.outputs.changelog }}
