name: Plugins - Publish plugin
description: |
  Publishes the plugin to the Grafana Plugin Catalog.
  The plugin must be built via the "ci" workflow before running this workflow.
  It does the following steps:
  - Publishes the plugin to 'dev', 'ops', and 'prod' catalogs.
  - ('prod' target only) Publishes docs to the website, if they exist.
  - ('prod' target only) Creates a lightweight Git tag and a drafts a new GitHub.

  This workflow can also publish a PR (or any other non-main branch), but only to the 'dev' catalog.

on:
  workflow_call:
    inputs:
      branch:
        description: Branch to publish from. Can be used to deploy PRs to dev.
        default: main
        type: string
      environment:
        description: |
          Environment(s) to publish to.
          Can be 'dev', 'ops', or 'prod'.

          Publishing to 'ops' will also deploy to 'dev'.
          Publishing to 'prod' will also deploy to 'ops' and 'dev'.

          Docs will only be published to the website when targeting 'prod'.
        required: true
        type: string
      docs-only:
        description: |
          Only publish docs to the website, do not publish the plugin.
        default: false
        type: boolean
      gcs-only:
        description: |
          Only publish the plugin to GCS, do not publish the plugin to the Grafana Plugin Catalog.
        default: false
        type: boolean
      run-playwright:
        description: Whether to run Playwright E2E tests.
        type: boolean
        required: false
        default: true

concurrency:
  group: cd-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write

env:
  VAULT_INSTANCE: ops

jobs:
  setup:
    name: Check and setup environment
    runs-on: ubuntu-latest

    outputs:
      commit-sha: ${{ steps.commit-sha.outputs.sha }}

    steps:
      - name: Check environment
        run: |
          if [ "${{ inputs.environment }}" != 'dev' ] && [ "${{ inputs.branch }}" != 'main' ]; then
            echo "Only 'dev' environment is allowed for non-main branches."
            exit 1
          fi

          if [ "${{ inputs.docs-only }}" == 'true' ]; then
            if [ "${{ inputs.environment }}" != 'prod' ]; then
              echo "Only 'prod' environment is allowed for docs publishing."
              exit 1
            fi

            if [ "${{ inputs.branch }}" != 'main' ]; then
              echo "Only 'main' branch can be used for docs publishing."
              exit 1
            fi
          fi
        shell: bash

      - name: Checkout specified branch
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
        with:
          ref: ${{ inputs.branch }}

      - name: Get commit SHA
        id: commit-sha
        run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  ci:
    name: CI
    uses: grafana/plugin-ci-workflows/.github/workflows/ci.yml@main
    needs:
      - setup
    with:
      branch: ${{ github.event.inputs.branch }}
      run-playwright: ${{ github.event.inputs.run-playwright == true }}
      plugin-version-suffix: >-
        ${{
          github.event.inputs.branch != 'main'
          && needs.setup.outputs.commit-sha
          || ''
        }}

  define-variables:
    name: Define variables
    runs-on: ubuntu-latest

    outputs:
      environments: ${{ steps.vars.outputs.environments }}
      publish-docs: ${{ steps.vars.outputs.publish-docs }}
      prod: ${{ steps.vars.outputs.prod }}

    steps:
      - name: Define variables
        id: vars
        run: |
          # If we are publishing docs only, we don't need to deploy the plugin
          if [ "${{ inputs.docs-only }}" == 'true' ]; then
            echo 'environments=[]' >> "$GITHUB_OUTPUT"
            echo 'publish-docs=true' >> "$GITHUB_OUTPUT"
            echo 'prod=false' >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Define environments matrix,
          # and deploy docs only if we are publishing to prod
          if [ "${{ inputs.environment }}" == 'dev' ]; then
            echo 'environments=["dev"]' >> "$GITHUB_OUTPUT"
            echo 'publish-docs=false' >> "$GITHUB_OUTPUT"
            echo 'prod=false' >> "$GITHUB_OUTPUT"
          elif [ "${{ inputs.environment }}" == 'ops' ]; then
            echo 'environments=["dev", "ops"]' >> "$GITHUB_OUTPUT"
            echo 'publish-docs=false' >> "$GITHUB_OUTPUT"
            echo 'prod=false' >> "$GITHUB_OUTPUT"
          elif [ "${{ inputs.environment }}" == 'prod' ]; then
            echo 'environments=["dev", "ops", "prod"]' >> "$GITHUB_OUTPUT"
            echo 'publish-docs=true' >> "$GITHUB_OUTPUT"
            echo 'prod=true' >> "$GITHUB_OUTPUT"
          else
            echo "Invalid environment '${{ inputs.environment }}'"
            exit 1
          fi
        shell: bash

  deploy:
    name: Deploy to ${{ matrix.environment }}
    if: ${{ !inputs.docs-only && !inputs.gcs-only }}
    needs:
      - define-variables
      - ci
    strategy:
      # Allow each stage to be deployed independently, even if others fails
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.define-variables.outputs.environments) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
        with:
          ref: ${{ inputs.branch }}

      - name: Login to Google Cloud (ID token for IAP)
        id: gcloud
        uses: google-github-actions/auth@8254fb75a33b976a221574d287e93919e6a36f70 # v2.1.6
        if: ${{ matrix.environment != 'prod' }}
        with:
          workload_identity_provider: "projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider"
          service_account: github-plugin-ci-workflows@grafanalabs-workload-identity.iam.gserviceaccount.com
          token_format: id_token
          id_token_audience: 194555723165-aftshfqa32nig79trcrh96ha94ta46jd.apps.googleusercontent.com
          id_token_include_email: true
          create_credentials_file: false
          export_environment_variables: false

      - name: Get secrets from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main
        with:
          vault_instance: ${{ env.VAULT_INSTANCE }}
          common_secrets: |
            GCOM_PUBLISH_TOKEN_DEV=plugins/gcom-publish-token:dev
            GCOM_PUBLISH_TOKEN_OPS=plugins/gcom-publish-token:ops
            GCOM_PUBLISH_TOKEN_PROD=plugins/gcom-publish-token:prod

      - name: Determine token
        run: |
          if [ "${{ matrix.environment }}" == 'dev' ]; then
            token="${{ env.GCOM_PUBLISH_TOKEN_DEV }}"
          elif [ "${{ matrix.environment }}" == 'ops' ]; then
            token="${{ env.GCOM_PUBLISH_TOKEN_OPS }}"
          elif [ "${{ matrix.environment }}" == 'prod' ]; then
            token="${{ env.GCOM_PUBLISH_TOKEN_PROD }}"
          else
            echo "Invalid environment '${{ matrix.environment }}'"
            exit 1
          fi
          echo "GCOM_PUBLISH_TOKEN=$token" >> "$GITHUB_ENV"
        shell: bash

      - name: Check and create stub
        uses: grafana/plugin-ci-workflows/actions/plugins/publish/check-and-create-stub@main
        if: ${{ matrix.environment != 'prod' }}
        with:
          plugin-id: ${{ fromJSON(needs.ci.outputs.plugin).id }}
          environment: ${{ matrix.environment }}
          gcom-publish-token: ${{ env.GCOM_PUBLISH_TOKEN }}
          gcloud-auth-token: ${{ steps.gcloud.outputs.id_token }}

      - name: Publish to catalog
        uses: grafana/plugin-ci-workflows/actions/plugins/publish/publish@main
        with:
          zips: ${{ needs.ci.outputs.gcs-zip-urls-commit }}
          environment: ${{ matrix.environment }}
          gcom-publish-token: ${{ env.GCOM_PUBLISH_TOKEN }}
          gcloud-auth-token: ${{ steps.gcloud.outputs.id_token }}

  publish-docs:
    name: Publish docs
    needs:
      - define-variables
      - ci
      # Update the docs only after a successful GCOM deployment
      # This dependency can be skipped if gcs-only is true. In that case, this step
      # is still executed due to the "!(failure() || cancelled())" condition.
      - deploy
    if: >-
      ${{
        (needs.ci.outputs.has-docs == 'true')
        && (needs.define-variables.outputs.publish-docs == 'true')
        && !(failure() || cancelled())
      }}
    runs-on: ubuntu-latest
    container:
      image: grafana/docs-base:latest
      volumes:
        # This mount is required in order to run the "plugins/docs/test" shared action
        # into the container. The action gets downloaded into /home/runner/work/_actions,
        # which is normally outside of the container's filesystem.
        - /home/runner/work/_actions:/home/runner/work/_actions
    steps:
      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
        with:
          ref: ${{ inputs.branch }}

      - name: Get secrets from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main
        with:
          vault_instance: ${{ env.VAULT_INSTANCE }}
          common_secrets: |
            GITHUB_APP_ID=plugins-platform-bot-app:app-id
            GITHUB_APP_PRIVATE_KEY=plugins-platform-bot-app:private-key

      - name: Generate GitHub token
        id: generate-github-token
        uses: actions/create-github-app-token@5d869da34e18e7287c1daad50e0b8ea0f506ce69 # v1.11.0
        with:
          app-id: ${{ env.GITHUB_APP_ID }}
          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Publish docs
        uses: grafana/plugin-ci-workflows/actions/plugins/docs/publish@main
        with:
          id: ${{ fromJSON(needs.ci.outputs.plugin).id }}
          version: ${{ fromJSON(needs.ci.outputs.plugin).version }}
          github-token: x-access-token:${{ steps.generate-github-token.outputs.token }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - define-variables
      - ci
      # Create the release only after a successful GCOM deployment
      # This dependency can be skipped if gcs-only is true. In that case, this step
      # is still executed due to the "!(failure() || cancelled())" condition.
      - deploy
    if: >-
      ${{
        (needs.define-variables.outputs.prod == 'true')
        && !(failure() || cancelled())
      }}
    steps:
      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
        with:
          ref: ${{ inputs.branch }}

      - name: Download GitHub artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: dist-artifacts
          path: /tmp/dist-artifacts

      - name: Parse changelog
        id: changelog
        uses: grafana/plugin-ci-workflows/actions/plugins/changelog@main

      - name: Print changelog
        run: |
          cat <<EOF
          ${{ steps.changelog.outputs.changelog }}
          EOF
        shell: bash

      - name: Create tag
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v${{ fromJSON(needs.ci.outputs.plugin).version }}',
              sha: context.sha
            })

      - name: Create Github release
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          draft: true
          name: ${{ fromJSON(needs.ci.outputs.plugin).id }} v${{ fromJSON(needs.ci.outputs.plugin).version }}
          tag_name: v${{ fromJSON(needs.ci.outputs.plugin).version }}
          files: |
            /tmp/dist-artifacts/*.zip
            /tmp/dist-artifacts/*.zip.sha1
          fail_on_unmatched_files: true
          body: ${{ steps.changelog.outputs.changelog }}
