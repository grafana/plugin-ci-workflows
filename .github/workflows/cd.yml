# Description:
# Publishes the plugin to the Grafana Plugin Catalog.
# The plugin must be built via the "ci" workflow before running this workflow.
# It does the following steps:
#  - Publishes the plugin to 'dev', 'ops', and 'prod' catalogs.
#  - ('prod' target only) Publishes docs to the website, if they exist.
#  - ('prod' target only) Creates a lightweight Git tag and a drafts a new GitHub.
#
#  This workflow can also publish a PR (or any other non-main branch), but only to the 'dev' catalog.

name: Plugins - Publish plugin

on:
  workflow_call:
    inputs:
      branch:
        description: Branch to publish from. Can be used to deploy PRs to dev.
        default: main
        type: string
      environment:
        description: |
          Environment(s) to publish to.
          Can be 'dev', 'ops', or 'prod'.

          Publishing to 'ops' will also deploy to 'dev'.
          Publishing to 'prod' will also deploy to 'ops' and 'dev'.

          Docs will only be published to the website when targeting 'prod'.
        required: true
        type: string
      scopes:
        description: |
          Comma-separated list of scopes for the plugin version.
          Default is 'universal'.
        required: false
        default: universal
        type: string
      docs-only:
        description: |
          Only publish docs to the website, do not publish the plugin.
        default: false
        type: boolean
      gcs-only:
        description: |
          Only publish the plugin to GCS, do not publish the plugin to the Grafana Plugin Catalog.
        default: false
        type: boolean
      run-playwright:
        description: Whether to run Playwright E2E tests.
        type: boolean
        required: false
        default: true
      # https://github.com/grafana/plugin-actions/blob/main/e2e-version/action.yml
      run-playwright-with-grafana-dependency:
        description: "Optionally, use this input to pass a semver range of supported Grafana versions to test against. This is only used when version-resolver-type is plugin-grafana-dependency. If not provided, the action will try to read grafanaDependency from the plugin.json file."
        type: string
        required: false
      run-playwright-with-skip-grafana-dev-image:
        description: "Optionally, you can skip the Grafana dev image"
        type: boolean
        required: false
        default: false
      run-playwright-with-version-resolver-type:
        description: Define which version resolver type to use for Playwright E2E tests.
        type: string
        required: false
        default: plugin-grafana-dependency
      upload-playwright-artifacts:
        description: |
          If true, the Playwright E2E artifacts will be uploaded to GitHub.
          Default is false.
          IMPORTANT: Make sure there are no unmasked secrets in the E2E tests before turning this on.
        required: false
        type: boolean
        default: false
      run-trufflehog:
        description: Whether to run Trufflehog secrets scanning.
        type: boolean
        required: false
        default: true
      trufflehog-version:
        description: Trufflehog version to use
        type: string
        required: false
        default: "3.88.1"
      trufflehog-include-detectors:
        description: |
          Comma-separated list of detector types to include.
          Protobuf name or IDs may be used, as well as ranges.
          This value will be passed via the `--include-detectors` option to Trufflehog.
          If not provided, the flag is not passed.
        type: string
        required: false
      trufflehog-exclude-detectors:
        description: |
          Comma-separated list of detector types to exclude.
          Protobuf name or IDs may be used, as well as ranges.
          IDs defined here take precedence over the include list.
          This value will be passed via the `--exclude-detectors` option to Trufflehog.
          If not provided, the flag is not passed.
        type: string
        required: false
concurrency:
  group: cd-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write

env:
  VAULT_INSTANCE: ops

jobs:
  setup:
    name: Check and setup environment
    runs-on: ubuntu-latest

    outputs:
      commit-sha: ${{ steps.checkout-specified-branch.outputs.commit }}

    steps:
      - name: Check environment
        run: |
          if [ "${{ inputs.environment }}" != 'dev' ] && [ "${{ inputs.branch }}" != 'main' ]; then
            echo "Only 'dev' environment is allowed for non-main branches."
            exit 1
          fi

          if [ "${{ inputs.docs-only }}" == 'true' ]; then
            if [ "${{ inputs.environment }}" != 'prod' ]; then
              echo "Only 'prod' environment is allowed for docs publishing."
              exit 1
            fi

            if [ "${{ inputs.branch }}" != 'main' ]; then
              echo "Only 'main' branch can be used for docs publishing."
              exit 1
            fi
          fi
        shell: bash

      - name: Checkout specified branch
        id: checkout-specified-branch
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ inputs.branch }}

  ci:
    name: CI
    uses: grafana/plugin-ci-workflows/.github/workflows/ci.yml@main
    needs:
      - setup
    with:
      branch: ${{ github.event.inputs.branch }}
      run-playwright: ${{ github.event.inputs.run-playwright == true }}
      run-playwright-with-grafana-dependency: ${{ inputs.run-playwright-with-grafana-dependency }}
      run-playwright-with-skip-grafana-dev-image: ${{ inputs.run-playwright-with-skip-grafana-dev-image }}
      run-playwright-with-version-resolver-type: ${{ inputs.run-playwright-with-version-resolver-type }}
      upload-playwright-artifacts: ${{ github.event.inputs.upload-playwright-artifacts == true }}
      run-trufflehog: ${{ github.event.inputs.run-trufflehog == true }}
      trufflehog-version: ${{ inputs.trufflehog-version }}
      trufflehog-include-detectors: ${{ inputs.trufflehog-include-detectors }}
      trufflehog-exclude-detectors: ${{ inputs.trufflehog-exclude-detectors }}
      plugin-version-suffix: >-
        ${{
          github.event.inputs.branch != 'main'
          && needs.setup.outputs.commit-sha
          || ''
        }}

  define-variables:
    name: Define variables
    runs-on: ubuntu-latest

    outputs:
      environments: ${{ steps.vars.outputs.environments }}
      publish-docs: ${{ steps.vars.outputs.publish-docs }}
      prod: ${{ steps.vars.outputs.prod }}

    steps:
      - name: Define variables
        id: vars
        run: |
          # If we are publishing docs only, we don't need to deploy the plugin
          if [ "${{ inputs.docs-only }}" == 'true' ]; then
            {
              echo 'environments=[]'
              echo 'publish-docs=true'
              echo 'prod=false'
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Define environments matrix,
          # and deploy docs only if we are publishing to prod
          if [ "${{ inputs.environment }}" == 'dev' ]; then
            {
              echo 'environments=["dev"]'
              echo 'publish-docs=false'
              echo 'prod=false' 
            } >> "$GITHUB_OUTPUT"
          elif [ "${{ inputs.environment }}" == 'ops' ]; then
            {
              echo 'environments=["dev", "ops"]'
              echo 'publish-docs=false'
              echo 'prod=false'
            } >> "$GITHUB_OUTPUT"
            
          elif [ "${{ inputs.environment }}" == 'prod' ]; then
            {
              echo 'environments=["dev", "ops", "prod"]'
              echo 'publish-docs=true'
              echo 'prod=true'
            } >> "$GITHUB_OUTPUT"
            
          else
            echo "Invalid environment '${{ inputs.environment }}'"
            exit 1
          fi
        shell: bash

  deploy:
    name: Deploy to ${{ matrix.environment }}
    if: ${{ !inputs.docs-only && !inputs.gcs-only }}
    needs:
      - define-variables
      - ci
    strategy:
      # Allow each stage to be deployed independently, even if others fails
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.define-variables.outputs.environments) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ inputs.branch }}

      - name: Login to Google Cloud (ID token for IAP)
        id: gcloud
        uses: google-github-actions/auth@v2.1.7
        if: ${{ matrix.environment != 'prod' }}
        with:
          workload_identity_provider: "projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider"
          service_account: github-plugin-ci-workflows@grafanalabs-workload-identity.iam.gserviceaccount.com
          token_format: id_token
          id_token_audience: 194555723165-aftshfqa32nig79trcrh96ha94ta46jd.apps.googleusercontent.com
          id_token_include_email: true
          create_credentials_file: false
          export_environment_variables: false

      - name: Get secrets from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main
        with:
          vault_instance: ${{ env.VAULT_INSTANCE }}
          common_secrets: |
            GCOM_PUBLISH_TOKEN_DEV=plugins/gcom-publish-token:dev
            GCOM_PUBLISH_TOKEN_OPS=plugins/gcom-publish-token:ops
            GCOM_PUBLISH_TOKEN_PROD=plugins/gcom-publish-token:prod

      - name: Determine which token to use
        run: |
          if [ "${{ matrix.environment }}" == 'dev' ]; then
            echo "Picked dev token"
            token="${{ env.GCOM_PUBLISH_TOKEN_DEV }}"
          elif [ "${{ matrix.environment }}" == 'ops' ]; then
            echo "Picked ops token"
            token="${{ env.GCOM_PUBLISH_TOKEN_OPS }}"
          elif [ "${{ matrix.environment }}" == 'prod' ]; then
            echo "Picked prod token"
            token="${{ env.GCOM_PUBLISH_TOKEN_PROD }}"
          else
            echo "Invalid environment '${{ matrix.environment }}'"
            exit 1
          fi
          echo "GCOM_PUBLISH_TOKEN=$token" >> "$GITHUB_ENV"
        shell: bash

      - name: Check and create stub
        uses: grafana/plugin-ci-workflows/actions/plugins/publish/check-and-create-stub@main
        if: ${{ matrix.environment != 'prod' }}
        with:
          plugin-id: ${{ fromJSON(needs.ci.outputs.plugin).id }}
          environment: ${{ matrix.environment }}
          gcom-publish-token: ${{ env.GCOM_PUBLISH_TOKEN }}
          gcloud-auth-token: ${{ steps.gcloud.outputs.id_token }}

      - name: Publish to catalog
        uses: grafana/plugin-ci-workflows/actions/plugins/publish/publish@main
        with:
          zips: ${{ needs.ci.outputs.gcs-zip-urls-commit }}
          environment: ${{ matrix.environment }}
          scopes: ${{ inputs.scopes }}
          gcom-publish-token: ${{ env.GCOM_PUBLISH_TOKEN }}
          gcloud-auth-token: ${{ steps.gcloud.outputs.id_token }}

  publish-docs:
    name: Publish docs
    needs:
      - define-variables
      - ci
      # Update the docs only after a successful GCOM deployment
      # This dependency can be skipped if gcs-only is true. In that case, this step
      # is still executed due to the "!(failure() || cancelled())" condition.
      - deploy
    if: >-
      ${{
        (needs.ci.outputs.has-docs == 'true')
        && (needs.define-variables.outputs.publish-docs == 'true')
        && !(failure() || cancelled())
      }}
    runs-on: ubuntu-latest
    container:
      image: grafana/docs-base:latest
      volumes:
        # This mount is required in order to run the "plugins/docs/test" shared action
        # into the container. The action gets downloaded into /home/runner/work/_actions,
        # which is normally outside of the container's filesystem.
        - /home/runner/work/_actions:/home/runner/work/_actions
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ inputs.branch }}

      - name: Get secrets from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main
        with:
          vault_instance: ${{ env.VAULT_INSTANCE }}
          common_secrets: |
            GITHUB_APP_ID=plugins-platform-bot-app:app-id
            GITHUB_APP_PRIVATE_KEY=plugins-platform-bot-app:private-key

      - name: Generate GitHub token
        id: generate-github-token
        uses: actions/create-github-app-token@v1.11.1
        with:
          app-id: ${{ env.GITHUB_APP_ID }}
          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Publish docs
        uses: grafana/plugin-ci-workflows/actions/plugins/docs/publish@main
        with:
          id: ${{ fromJSON(needs.ci.outputs.plugin).id }}
          version: ${{ fromJSON(needs.ci.outputs.plugin).version }}
          github-token: x-access-token:${{ steps.generate-github-token.outputs.token }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - define-variables
      - ci
      # Create the release only after a successful GCOM deployment
      # This dependency can be skipped if gcs-only is true. In that case, this step
      # is still executed due to the "!(failure() || cancelled())" condition.
      - deploy
    if: >-
      ${{
        (needs.define-variables.outputs.prod == 'true')
        && !(failure() || cancelled())
      }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ inputs.branch }}

      - name: Download GitHub artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: dist-artifacts
          path: /tmp/dist-artifacts

      - name: Parse changelog
        id: changelog
        uses: grafana/plugin-ci-workflows/actions/plugins/changelog@main

      - name: Print changelog
        run: |
          cat <<EOF
          ${{ steps.changelog.outputs.changelog }}
          EOF
        shell: bash

      - name: Create tag
        uses: actions/github-script@v7.0.1
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v${{ fromJSON(needs.ci.outputs.plugin).version }}',
              sha: context.sha
            })

      - name: Create Github release
        uses: softprops/action-gh-release@v2.2.0
        with:
          draft: true
          name: ${{ fromJSON(needs.ci.outputs.plugin).id }} v${{ fromJSON(needs.ci.outputs.plugin).version }}
          tag_name: v${{ fromJSON(needs.ci.outputs.plugin).version }}
          files: |
            /tmp/dist-artifacts/*.zip
            /tmp/dist-artifacts/*.zip.sha1
          fail_on_unmatched_files: true
          body: ${{ steps.changelog.outputs.changelog }}
