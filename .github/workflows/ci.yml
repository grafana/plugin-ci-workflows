# Description:
#  CI workflow for building, testing and packaging a plugin.
#  It does the following steps:
#  - Runs unit tests and builds the frontend
#  - Tests and builds the backend (if it exists)
#  - Signs and packages the plugin into a universal ZIP and OS/arch ZIPs
#  - Tests the plugin docs (if they exist)
#  - Runs Playwright E2E tests (if they exist)
#  - Runs Trufflehog security scanning on all the plugin ZIPs
#  - Uploads the ZIPs to Google Cloud Storage, for publishing to the Grafana Plugin Catalog
#  - Uploads the ZIPs as GitHub artifacts, for other workflows to consume

name: Plugins - CI

on:
  workflow_call:
    inputs:
      # Those inputs can be customized depending on the plugin's needs:

      # Custom tooling versions. The default values are in the env section.
      go-version:
        description: Go version to use
        type: string
        required: false
      node-version:
        description: Node.js version to use
        type: string
        required: false
      golangci-lint-version:
        description: golangci-lint version to use
        type: string
        required: false
      trufflehog-version:
        description: Trufflehog version to use
        type: string
        required: false

      # Build options.
      plugin-directory:
        description: Directory of the plugin, if not in the root of the repository. If provided, package-manager must also be provided.
        type: string
        required: false
        default: .
      package-manager:
        description: The package manager to use.
        type: string
        required: false
        default: ""

      # Playwright
      run-playwright:
        description: Whether to run Playwright E2E tests.
        type: boolean
        required: false
        default: true
      run-playwright-docker:
        description: |
          Whether to run dockerized Playwright E2E tests.
          Make sure to have a both a 'playwright' service with a 'playwright' profile
          in your docker-compose.yaml file for the tests to run against
          see: https://docs.docker.com/compose/how-tos/profiles/
        type: boolean
        required: false
        default: false
      # https://github.com/grafana/plugin-actions/blob/main/e2e-version/action.yml
      run-playwright-with-grafana-dependency:
        description: |
          Optionally, use this input to pass a semver range of supported Grafana versions to test against.
          This is only used when version-resolver-type is plugin-grafana-dependency.
          If not provided, the action will try to read grafanaDependency from the plugin.json file.
        type: string
        required: false
      run-playwright-with-skip-grafana-dev-image:
        description: Optionally, you can skip the Grafana dev image
        type: boolean
        required: false
        default: false
      run-playwright-with-version-resolver-type:
        description: Define which version resolver type to use for Playwright E2E tests.
        type: string
        required: false
        default: plugin-grafana-dependency
      upload-playwright-artifacts:
        description: |
          If true, the Playwright E2E artifacts will be uploaded to GitHub.
          Default is false.
          IMPORTANT: Make sure there are no unmasked secrets in the E2E tests before turning this on.
        required: false
        type: boolean
        default: false
      playwright-report-path:
        required: false
        type: string
        description: Path to the folder to use to upload the artifacts
        default: playwright-report/
      playwright-docker-compose-file:
        required: false
        type: string
        description: Path to the docker-compose file to use for testing
      playwright-config:
        required: false
        type: string
        default: playwright.config.ts
        description: Path to the Playwright config file to use for testing
      playwright-grafana-url:
        description: The URL where Grafana is available at when running Playwright tests
        type: string
        required: false
        default: http://localhost:3000/
      playwright-secrets:
        description: |
          The secrets to use for Playwright tests.
          This uses the grafana/shared-workflows/actions/get-vault-secrets action under the hood,
          so the syntax is the same. It fetches from the repo's secrets.
        type: string
        required: false
        default: ""

      # Trufflehog
      run-trufflehog:
        description: Whether to run Trufflehog secrets scanning.
        type: boolean
        required: false
        default: true
      trufflehog-include-detectors:
        description: |
          Comma-separated list of detector types to include.
          Protobuf name or IDs may be used, as well as ranges.
          This value will be passed via the `--include-detectors` option to Trufflehog.
          If not provided, the flag is not passed.
        type: string
        required: false
      trufflehog-exclude-detectors:
        description: |
          Comma-separated list of detector types to exclude.
          Protobuf name or IDs may be used, as well as ranges.
          IDs defined here take precedence over the include list.
          This value will be passed via the `--exclude-detectors` option to Trufflehog.
          If not provided, the flag is not passed.
        type: string
        required: false

      # Options for building PRs. Those values should come from the PR event and should not be set manually.
      plugin-version-suffix:
        description: |
          Suffix to append to plugin version before building it, which will be separated by a "+" sign.
          For example `abcdef` will set the plugin version to `1.2.3+abcdef`.
          Useful for giving a unique version to the plugin built from a PR.
          Leave empty for no suffix (use the same version as in package.json).
        type: string
        required: false
        default: ""
      branch:
        description: Branch to build from. Can be used to build PRs.
        type: string
        required: false
        default: ${{ github.ref || github.ref_name }}

    outputs:
      plugin:
        description: |
          Plugin information in JSON format.

          Contains the following properties:
          - id: plugin id
          - version: plugin version
          - has-backend: true/false, whether the plugin has a backend
          - executable: plugin backend executable path

          Properties be consumed like this:
          fromJSON(<...>.outputs.plugin).id
        value: ${{ jobs.test-and-build.outputs.plugin }}

      has-docs:
        description: Whether the plugin has docs.
        value: ${{ jobs.docs.outputs.exist }}

      universal-zip:
        value: ${{ jobs.test-and-build.outputs.universal-zip }}
      os-arch-zips:
        value: ${{ jobs.test-and-build.outputs.os-arch-zips }}
      zips:
        value: ${{ jobs.test-and-build.outputs.zips }}

      gcs-zip-urls-latest:
        value: ${{ jobs.upload-to-gcs.outputs.zip-urls-latest }}
      gcs-zip-urls-commit:
        value: ${{ jobs.upload-to-gcs.outputs.zip-urls-commit }}

      gcs-universal-zip-url-latest:
        value: ${{ jobs.upload-to-gcs.outputs.universal-zip-url-latest }}
      gcs-universal-zip-url-commit:
        value: ${{ jobs.upload-to-gcs.outputs.universal-zip-url-commit }}

concurrency:
  group: ci-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

env:
  # Default versions for tooling
  DEFAULT_GO_VERSION: "1.23"
  DEFAULT_NODE_VERSION: "20"
  DEFAULT_GOLANGCI_LINT_VERSION: "1.61.0"
  DEFAULT_TRUFFLEHOG_VERSION: "3.88.1"

  GCS_ARTIFACTS_BUCKET: integration-artifacts
  VAULT_INSTANCE: ops

  IS_FORK: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository }}

jobs:
  test-and-build:
    name: Test and build plugin
    runs-on: ubuntu-latest-8-cores

    outputs:
      plugin: ${{ steps.outputs.outputs.plugin }}

      universal-zip: ${{ steps.outputs.outputs.universal-zip }}
      os-arch-zips: ${{ steps.outputs.outputs.os-arch-zips }}
      zips: ${{ steps.outputs.outputs.zips }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.branch }}
          persist-credentials: false

      - name: Setup
        uses: grafana/plugin-ci-workflows/actions/plugins/setup@main # zizmor: ignore[unpinned-uses]
        with:
          go-version: ${{ inputs.go-version || env.DEFAULT_GO_VERSION }}
          node-version: ${{ inputs.node-version || env.DEFAULT_NODE_VERSION }}
          golangci-lint-version: ${{ inputs.golangci-lint-version || env.DEFAULT_GOLANGCI_LINT_VERSION }}

      - name: Get secrets from Vault
        id: get-secrets
        if: ${{ env.IS_FORK == 'false' }}
        uses: grafana/shared-workflows/actions/get-vault-secrets@9f37f656e063f0ad0b0bfc38d49894b57d363936 # v1.2.1
        with:
          vault_instance: ${{ env.VAULT_INSTANCE }}
          common_secrets: |
            SIGN_PLUGIN_ACCESS_POLICY_TOKEN=plugins/sign-plugin-access-policy-token:token
            GITHUB_APP_ID=plugins-platform-bot-app:app-id
            GITHUB_APP_PRIVATE_KEY=plugins-platform-bot-app:private-key
          export_env: false

      - name: Generate GitHub token
        id: generate-github-token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        if: ${{ env.IS_FORK == 'false' }}
        with:
          app-id: ${{ fromJSON(steps.get-secrets.outputs.secrets).GITHUB_APP_ID }}
          private-key: ${{ fromJSON(steps.get-secrets.outputs.secrets).GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Spellcheck
        run: |
          if [ -f "./cspell.config.json" ]; then
            npx --yes cspell@6.13.3 -c cspell.config.json "**/*.{ts,tsx,js,go,md,mdx,yml,yaml,json,scss,css}"
          else
            echo "❌ Spellcheck is not configured."
          fi
        shell: bash

      - name: Replace plugin version
        if: ${{ inputs.plugin-version-suffix != '' }}
        run: |
          package_json_path="$PLUGIN_DIRECTORY/package.json"
          version=$(jq -r .version "$package_json_path")
          pr_version="$version+${PLUGIN_VERSION_SUFFIX}"
          echo "Replacing plugin version \"$version\" with \"$pr_version\" in $package_json_path"
          jq --arg pr_version "$pr_version" '.version = $pr_version' "$package_json_path" > /tmp/package.json
          mv /tmp/package.json "$package_json_path"
        env:
          PLUGIN_DIRECTORY: ${{ inputs.plugin-directory }}
          PLUGIN_VERSION_SUFFIX: ${{ inputs.plugin-version-suffix }}
        shell: bash

      - name: Check for backend
        id: check-for-backend
        run: |
          r=false
          [ -f "Magefile.go" ] && r=true
          echo "has-backend=$r" >> "$GITHUB_OUTPUT"
        shell: bash
        working-directory: ${{ inputs.plugin-directory }}

      - name: Test and build frontend
        uses: grafana/plugin-ci-workflows/actions/plugins/frontend@main # zizmor: ignore[unpinned-uses]
        with:
          package-manager: ${{ inputs.package-manager }}
          plugin-directory: ${{ inputs.plugin-directory }}

      - name: Test and build backend
        if: ${{ steps.check-for-backend.outputs.has-backend == 'true' }}
        uses: grafana/plugin-ci-workflows/actions/plugins/backend@main # zizmor: ignore[unpinned-uses]
        with:
          github-token: ${{ steps.generate-github-token.outputs.token }}
          plugin-directory: ${{ inputs.plugin-directory }}

      - name: Package universal ZIP
        id: universal-zip
        uses: grafana/plugin-ci-workflows/actions/plugins/package@main # zizmor: ignore[unpinned-uses]
        with:
          universal: "true"
          dist-folder: dist
          output-folder: dist-artifacts
          access-policy-token: ${{ env.IS_FORK == 'false' && fromJSON(steps.get-secrets.outputs.secrets).SIGN_PLUGIN_ACCESS_POLICY_TOKEN || '' }}
          allow-unsigned: ${{ env.IS_FORK == 'true' }}

      - name: Package os/arch ZIPs
        id: os-arch-zips
        uses: grafana/plugin-ci-workflows/actions/plugins/package@main # zizmor: ignore[unpinned-uses]
        with:
          universal: "false"
          dist-folder: dist
          output-folder: dist-artifacts
          access-policy-token: ${{ env.IS_FORK == 'false' && fromJSON(steps.get-secrets.outputs.secrets).SIGN_PLUGIN_ACCESS_POLICY_TOKEN || '' }}
          allow-unsigned: ${{ env.IS_FORK == 'true' }}

      - name: Trufflehog secrets scanning
        if: ${{ inputs.run-trufflehog == true }}
        uses: grafana/plugin-ci-workflows/actions/plugins/trufflehog@main # zizmor: ignore[unpinned-uses]
        with:
          trufflehog-version: ${{ inputs.trufflehog-version || env.DEFAULT_TRUFFLEHOG_VERSION }}
          folder: dist-artifacts
          include-detectors: ${{ inputs.trufflehog-include-detectors }}
          exclude-detectors: ${{ inputs.trufflehog-exclude-detectors }}

      - name: Define outputs
        id: outputs
        run: |
          {
            echo plugin="$(jq -n -c \
                --arg id "$(jq -r .id dist/plugin.json)" \
                --arg version "$(jq -r .info.version dist/plugin.json)" \
                --arg has-backend "${HAS_BACKEND}" \
                --arg executable "$(jq -r .executable dist/plugin.json)" \
                '$ARGS.named'
              )"

            echo universal-zip="${UNIVERSAL_ZIP}"
            echo os-arch-zips="${OS_ARCH_ZIPS}"

            # combine universal zip string with os-arch zips into a single array
            zips=$(echo -e '["'"${UNIVERSAL_ZIP}"'"]' '\n' "${OS_ARCH_ZIPS}" | jq -cs 'add')
            echo zips="$zips"
          }  >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
        env:
          HAS_BACKEND: ${{ steps.check-for-backend.outputs.has-backend }}
          UNIVERSAL_ZIP: ${{ steps.universal-zip.outputs.zip }}
          OS_ARCH_ZIPS: ${{ steps.os-arch-zips.outputs.zip }}
        shell: bash

      - name: Upload GitHub artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dist-artifacts
          path: dist-artifacts/
          retention-days: 7

  docs:
    name: Test docs
    runs-on: ubuntu-latest
    container:
      image: grafana/docs-base:latest
      volumes:
        # This mount is required in order to run the "plugins/docs/test" shared action
        # into the container. The action gets downloaded into /home/runner/work/_actions,
        # which is normally outside of the container's filesystem.
        - /home/runner/work/_actions:/home/runner/work/_actions

    outputs:
      exist: ${{ steps.exist.outputs.exist }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.branch }}
          persist-credentials: false

      - name: Check docs exist
        id: exist
        run: |
          r=false
          [ -d "docs/sources" ] && r=true
          echo "exist=$r" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Test docs
        uses: grafana/plugin-ci-workflows/actions/plugins/docs/test@main # zizmor: ignore[unpinned-uses]

  playwright:
    name: Playwright E2E tests
    uses: grafana/plugin-ci-workflows/.github/workflows/playwright.yml@main # zizmor: ignore[unpinned-uses]
    if: ${{ inputs.run-playwright == true }}
    needs:
      - test-and-build
    with:
      id: ${{ fromJSON(needs.test-and-build.outputs.plugin).id}}
      version: ${{ fromJSON(needs.test-and-build.outputs.plugin).version}}
      plugin-directory: ${{ inputs.plugin-directory }}
      grafana-dependency: ${{ inputs.run-playwright-with-grafana-dependency }}
      skip-grafana-dev-image: ${{ inputs.run-playwright-with-skip-grafana-dev-image }}
      version-resolver-type: ${{ inputs.run-playwright-with-version-resolver-type }}
      upload-artifacts: ${{ inputs.upload-playwright-artifacts }}
      docker-compose-file: ${{ inputs.playwright-docker-compose-file }}
      playwright-config: ${{ inputs.playwright-config }}
      report-path: ${{ inputs.playwright-report-path }}
      grafana-url: ${{ inputs.playwright-grafana-url }}
      secrets: ${{ (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]' && inputs.playwright-secrets != '') && inputs.playwright-secrets || '' }}

  playwright-docker:
    name: Plugins - Dockerized Playwright E2E tests
    uses: grafana/plugin-ci-workflows/.github/workflows/playwright-docker.yml@main # zizmor: ignore[unpinned-uses]
    if: ${{ inputs.run-playwright-docker == true }}
    needs:
      - test-and-build
    with:
      id: ${{ fromJSON(needs.test-and-build.outputs.plugin).id}}
      version: ${{ fromJSON(needs.test-and-build.outputs.plugin).version}}
      grafana-dependency: ${{ inputs.run-playwright-with-grafana-dependency }}
      skip-grafana-dev-image: ${{ inputs.run-playwright-with-skip-grafana-dev-image }}
      version-resolver-type: ${{ inputs.run-playwright-with-version-resolver-type }}
      upload-artifacts: ${{ inputs.upload-playwright-artifacts }}
      grafana-compose-file: ${{ inputs.playwright-docker-compose-file }}
      report-path: ${{ inputs.playwright-report-path }}
      grafana-url: ${{ inputs.playwright-grafana-url }}
      secrets: ${{ (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]' && inputs.playwright-secrets != '') && inputs.playwright-secrets || '' }}

  upload-to-gcs:
    name: Upload to GCS
    runs-on: ubuntu-latest

    # Skip the GCS upload for PRs from forks (no access to the GCS bucket)
    # This is equivalent to !env.IS_FORK (we don't have access to the env context at this level)
    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository) }}

    needs:
      - test-and-build

    outputs:
      zip-urls-latest: ${{ steps.outputs.outputs.zip_urls_latest }}
      zip-urls-commit: ${{ steps.outputs.outputs.zip_urls_commit }}

      universal-zip-url-latest: ${{ steps.outputs.outputs.universal_zip_url_latest }}
      universal-zip-url-commit: ${{ steps.outputs.outputs.universal_zip_url_commit }}

    steps:
      - name: Download GitHub artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: dist-artifacts
          path: /tmp/dist-artifacts

      - name: Login to Google Cloud
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          workload_identity_provider: "projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider"
          service_account: github-plugin-ci-workflows@grafanalabs-workload-identity.iam.gserviceaccount.com

      - name: Determine GCS artifacts paths
        run: |
          # Strip the SHA suffix from the version, if present.
          PLUGIN_VERSION="${PLUGIN_VERSION%%+*}"
          gcs_artifacts_base="${{ env.GCS_ARTIFACTS_BUCKET }}/${PLUGIN_ID}/${PLUGIN_VERSION}"
          echo "gcs_artifacts_path_latest=$gcs_artifacts_base/main/latest" >> "$GITHUB_ENV"
          echo "gcs_artifacts_path_commit=$gcs_artifacts_base/${GCS_GIT_REF}/${GCS_GIT_SHA}" >> "$GITHUB_ENV"
        env:
          PLUGIN_ID: ${{ fromJSON(needs.test-and-build.outputs.plugin).id }}
          PLUGIN_VERSION: ${{ fromJSON(needs.test-and-build.outputs.plugin).version }}
          GCS_GIT_REF: ${{ github.event.pull_request.base.ref || 'main' }}
          GCS_GIT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}
        shell: bash

      - name: Upload GCS artifacts (latest)
        id: gcs-upload-latest
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main'}}
        uses: google-github-actions/upload-cloud-storage@7c73f5d6eae167341002e9c946f7479a609c588e # v2.2.3
        with:
          path: /tmp/dist-artifacts
          destination: ${{ env.gcs_artifacts_path_latest }}
          parent: false
          process_gcloudignore: false

      - name: Upload GCS artifacts (commit)
        id: gcs-upload-commit
        uses: google-github-actions/upload-cloud-storage@7c73f5d6eae167341002e9c946f7479a609c588e # v2.2.3
        with:
          path: /tmp/dist-artifacts
          destination: ${{ env.gcs_artifacts_path_commit }}
          parent: false
          process_gcloudignore: false

      - name: Define outputs
        id: outputs
        run: |
          gcs_prefix="https://storage.googleapis.com/${{ env.GCS_ARTIFACTS_BUCKET }}"

          zip_urls_latest=$(jq -n '[]')
          files="${GCS_UPLOADED_FILES_LATEST}"
          echo gcs latest files: "$files"

          IFS=','
          for file in $files; do
            if [[ ! $file == *.zip ]]; then
              continue
            fi
            gcs_url="$gcs_prefix/$file"
            zip_urls_latest=$(echo "$zip_urls_latest" | jq -c --arg x "$gcs_url" '. + [$x]')
          done
          unset IFS

          zip_urls_commit=$(jq -n '[]')
          files="${GCS_UPLOADED_FILES_COMMIT}"
          echo gcs commit files: "$files"

          IFS=','
          for file in $files; do
            if [[ ! $file == *.zip ]]; then
              continue
            fi
            gcs_url="$gcs_prefix/$file"
            zip_urls_commit=$(echo "$zip_urls_commit" | jq -c --arg x "$gcs_url" '. + [$x]')
          done
          unset IFS

          echo zip_urls_latest="$zip_urls_latest" >> "$GITHUB_OUTPUT"
          echo zip_urls_commit="$zip_urls_commit" >> "$GITHUB_OUTPUT"

          universal_zip_file_name=$(basename "${UNIVERSAL_ZIP}")
          if [ -n "$universal_zip_file_name" ]; then
            echo universal_zip_url_latest="$gcs_artifacts_path_latest/$universal_zip_file_name" >> "$GITHUB_OUTPUT"
            echo universal_zip_url_commit="$gcs_artifacts_path_commit/$universal_zip_file_name" >> "$GITHUB_OUTPUT"
          fi
        env:
          GCS_UPLOADED_FILES_LATEST: ${{ steps.gcs-upload-latest.outputs.uploaded }}
          GCS_UPLOADED_FILES_COMMIT: ${{ steps.gcs-upload-commit.outputs.uploaded }}
          UNIVERSAL_ZIP: ${{ needs.test-and-build.outputs.universal-zip }}
        shell: bash
