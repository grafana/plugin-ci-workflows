name: Standard version bump changelog
description: |
  Bump version and generate changelog using standard-version.
  Can run in automatic mode (based on commit messages) or manual mode (specified version type).
  Optionally create a github draft release.

inputs:
  automatic:
    description: "Automatic: let standard-version do the version bump based on the commit messages"
    required: false
    type: boolean
    default: false
  version:
    required: false
    description: "Semver type of new version (major / minor / patch)"
    type: choice
    options:
      - patch
      - minor
      - major
    default: patch
  github-draft-release:
    description: "Draft release: Create a draft release on GitHub"
    required: false
    type: boolean
    default: false

runs:
  using: composite
  steps:
    - name: Get secrets from Vault
      id: get-secrets
      uses: grafana/shared-workflows/actions/get-vault-secrets@9f37f656e063f0ad0b0bfc38d49894b57d363936 # v1.2.1
      env:
        VAULT_INSTANCE: ops
      with:
        vault_instance: ops
        common_secrets: |
          GITHUB_APP_ID=plugins-platform-bot-app:app-id
          GITHUB_APP_PRIVATE_KEY=plugins-platform-bot-app:private-key
        export_env: false

    - name: Generate GitHub token
      id: generate-github-token
      uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
      with:
        app-id: ${{ fromJSON(steps.get-secrets.outputs.secrets).GITHUB_APP_ID }}
        private-key: ${{ fromJSON(steps.get-secrets.outputs.secrets).GITHUB_APP_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}

    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        token: ${{ steps.generate-github-token.outputs.token }}
        persist-credentials: true
        fetch-depth: 0

    - name: Configure Git
      shell: bash
      run: |
        git config user.name 'grafana-plugins-platform-bot[bot]'
        git config user.email '144369747+grafana-plugins-platform-bot[bot]@users.noreply.github.com'

    - name: Install standard-version
      shell: bash
      run: npm install -g standard-version

    - name: Run automatic standard-version
      if: ${{ inputs.automatic == 'true' }}
      shell: bash
      run: |
        echo "Running automatic version bump..."
        npx standard-version

        # Get the new version that was created
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "new-version=${NEW_VERSION}" >> $GITHUB_OUTPUT

    - name: Run manual standard-version - major
      if: ${{ inputs.version == 'major' }}
      shell: bash
      run: |
        echo "Running manual version bump for major..."

        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")

        # Increment major version, reset minor and patch
        MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
        NEW_MAJOR=$((MAJOR + 1))
        NEXT_VERSION="${NEW_MAJOR}.0.0"

        echo "Current version: $CURRENT_VERSION"
        echo "Next version: $NEXT_VERSION"

        # Run standard-version with the calculated next version
        npx standard-version --release-as $NEXT_VERSION

        # Get the new version that was created
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "new-version=${NEW_VERSION}" >> $GITHUB_OUTPUT

    - name: Run manual standard-version - minor
      if: ${{ inputs.version == 'minor' }}
      shell: bash
      run: |
        echo "Running manual version bump for minor..."

        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")

        # Increment minor version, reset patch
        MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
        MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
        NEW_MINOR=$((MINOR + 1))
        NEXT_VERSION="${MAJOR}.${NEW_MINOR}.0"

        echo "Current version: $CURRENT_VERSION"
        echo "Next version: $NEXT_VERSION"

        # Run standard-version with the calculated next version
        npx standard-version --release-as $NEXT_VERSION

        # Get the new version that was created
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "new-version=${NEW_VERSION}" >> $GITHUB_OUTPUT

    - name: Run manual standard-version - patch
      if: ${{ inputs.version == 'patch' }}
      shell: bash
      run: |
        echo "Running manual version bump for patch..."

        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")

        # Increment patch version
        MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
        MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
        PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
        NEW_PATCH=$((PATCH + 1))
        NEXT_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"

        echo "Current version: $CURRENT_VERSION"
        echo "Next version: $NEXT_VERSION"

        # Run standard-version with the calculated next version
        npx standard-version --release-as $NEXT_VERSION

    - name: Push changes
      env:
        GITHUB_TOKEN: ${{ steps.generate-github-token.outputs.token }}
      shell: bash
      run: |
        git push origin HEAD
        git push origin --tags

    - name: Create GitHub draft release
      if: ${{ inputs.github-draft-release == 'true' }}
      env:
        GITHUB_TOKEN: ${{ steps.generate-github-token.outputs.token }}
      run: |
        VERSION=$(node -p "require('./package.json').version")
        TAG="v$VERSION"
        # Extract changelog content from the latest version section
        # Find the first ### line and extract everything until the next ## or ### line
        CHANGELOG=$(awk '/^### \[/ {if (p) exit; p=1; next} /^## / {if (p) exit} p' CHANGELOG.md)
        echo "$CHANGELOG" > release-notes.md
        echo "Extracted changelog content:"
        cat release-notes.md
        gh auth setup-git
        gh release create "$TAG" --title "$TAG" --notes-file release-notes.md --draft
