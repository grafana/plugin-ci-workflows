name: Plugins - Frontend - Test and build
description: Tests, lints, typechecks and builds the frontend.

inputs:
  plugin-directory:
    description: Directory of the plugin, if not in the root of the repository. If provided, package-manager must also be provided.
    required: false
    default: .
  package-manager:
    description: The package manager to use.
    required: false
    default: ""
  secrets:
    required: false
    type: string
    description: The secrets to use within frontend steps
  npm-registry-auth:
    description: |
      Whether to authenticate to the npm registry in Google Artifact Registry.
      If true, the root of the plugin repository must contain a `.npmrc` file.
    required: false
    default: "false"

runs:
  using: composite
  steps:
    - name: Get secrets from Vault
      if: inputs.secrets != ''
      id: get-secrets
      uses: grafana/shared-workflows/actions/get-vault-secrets@get-vault-secrets/v1.2.1 # zizmor: ignore[unpinned-uses]
      with:
        repo_secrets: ${{ inputs.secrets }}

    - name: Debug OIDC Claims
      uses: github/actions-oidc-debugger@main
      with:
        audience: "${{ github.server_url }}/${{ github.repository_owner }}"

    - name: Login to Google Cloud
      if: inputs.npm-registry-auth == 'true'
      uses: google-github-actions/auth@b7593ed2efd1c1617e1b0254da33b86225adb2a5 # v2.1.12
      with:
        token_format: access_token
        workload_identity_provider: "projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider"
        service_account: github-plugin-ci-workflows@grafanalabs-workload-identity.iam.gserviceaccount.com

    - name: NPM registry auth
      if: inputs.npm-registry-auth == 'true'
      shell: bash
      working-directory: ${{ inputs.plugin-directory }}
      run: GOOGLE_APPLICATION_CREDENTIALS=${{ env.GOOGLE_APPLICATION_CREDENTIALS }} npx google-artifactregistry-auth --credential-config ./.npmrc

    - name: Install dependencies
      shell: bash
      working-directory: ${{ inputs.plugin-directory }}
      run: ${{ github.action_path }}/pm.sh install
      env:
        PACKAGE_MANAGER: ${{ inputs.package-manager }}

    - name: Lint
      shell: bash
      working-directory: ${{ inputs.plugin-directory }}
      run: ${{ github.action_path }}/pm.sh lint
      env:
        PACKAGE_MANAGER: ${{ inputs.package-manager }}

    - name: Typecheck
      shell: bash
      working-directory: ${{ inputs.plugin-directory }}
      run: ${{ github.action_path }}/pm.sh typecheck
      env:
        PACKAGE_MANAGER: ${{ inputs.package-manager }}

    - name: Test
      shell: bash
      working-directory: ${{ inputs.plugin-directory }}
      run: ${{ github.action_path }}/pm.sh test:ci
      env:
        PACKAGE_MANAGER: ${{ inputs.package-manager }}

    - name: Build
      shell: bash
      working-directory: ${{ inputs.plugin-directory }}
      run: ${{ github.action_path }}/pm.sh build
      env:
        PACKAGE_MANAGER: ${{ inputs.package-manager }}

    # The action should end up with a dist/ folder, but if the working directory is not the root of the repo,
    # we need to copy the dist/ folder to the root of the repo.
    - name: Copy dist if needed
      run: |
        if [ "$PLUGIN_DIRECTORY" != "." ]; then
          mkdir -p dist
          cp -r $PLUGIN_DIRECTORY/dist/* dist/
        fi
      shell: bash
      if: inputs.plugin-directory != '.'
      env:
        PLUGIN_DIRECTORY: ${{ inputs.plugin-directory }}
